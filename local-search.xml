<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端开发环境手册（Windows 篇）</title>
    <link href="/fe-landing-log-windows/"/>
    <url>/fe-landing-log-windows/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>访问<a href="https://git-scm.com/download/win">下载地址</a>，下载独立安装程序，默认配置点点点就好</p><p><img src="https://static.chanx.tech/image/FzzrbWQv1oK29vxsmsTcltK6nPH.png"></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>打开 <code>Git Bash</code>，执行以下命令进行全局配置</p><blockquote><p>Git Bash 不能使用快捷键粘贴，请使用<strong>右键菜单</strong>进行复制粘贴</p></blockquote><ul><li><code>git config --global core.autocrlf input</code>（统一换行符为 LF）</li><li><code>git config --global --replace core.editor &quot;code --wait&quot;</code>（用 VSCode 编辑，默认是 Vim）</li><li><code>git config --global user.name &quot;``此处填用户名``&quot;</code></li><li><code>git config --global user.email &quot;``此处填邮箱``&quot;</code>（邮箱是和 GitHub&#x2F;Gitea&#x2F;Gitlab 账号一致的邮箱）</li><li><code>git config --global --list</code>（查看上述配置结果）</li></ul><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><blockquote><p>git clone 支持 https 和 ssh 两种方式克隆代码，当使用 ssh 方式时如果没有配置过 ssh key，会有如下错误提示：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">```<br><br><span class="hljs-symbol">git@</span>github.com：Permission denied(publickey).<br>fatal: Could <span class="hljs-keyword">not</span> read <span class="hljs-keyword">from</span> remote repository.<br><br></code></pre></td></tr></table></figure></blockquote><h3 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h3><ol><li>打开<code>Git Bash</code>并执行以下命令，邮箱使用上一步配置的</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ssh-keygen -t rsa -C <span class="hljs-string">&quot;此处填邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>执行上面命令后需要进行几次确认，<strong>一般直接回车就行，可能需要输入 Y 进行覆盖</strong></p><ul><li>确认秘钥的保存路径（如果不需要改路径则直接回车）</li><li>如果上一步保存路径下已经有秘钥文件，则需要确认是否覆盖（输入 Y 进行覆盖）</li><li>创建密码（如果不需要密码则直接回车）</li><li>确认密码（如果不需要密码则直接回车）</li></ul><p>命令执行完会在** 。ssh 文件夹路径（这个后面有用）**下会生成 2 个文件：（如图为 <code>c/Users/chanx/.ssh</code>）</p><ul><li><code>id_rsa</code> 私钥文件</li><li><code>id_rsa.pub</code> 公钥文件</li></ul><ol><li>打开 <code>Git Bash</code> 继续执行命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>执行命令后输出的 ssh-rsa 开头文本即为公钥</p><p><img src="https://static.chanx.tech/image/SUJFbKxDfoBpkBx2h4OcDyLvncB.png"></p><h3 id="远程仓库配置公钥（Github-为例）"><a href="#远程仓库配置公钥（Github-为例）" class="headerlink" title="远程仓库配置公钥（Github 为例）"></a>远程仓库配置公钥（Github 为例）</h3><p>打开 GitHub，进入到个人账号设置页配置公钥： Settings -&gt; SSH and GPG keys -&gt; New SSH key</p><p>将上一步骤生成的公钥复制到 Key 下面的文本框，Title 根据实际情况命名，然后点保存即可</p><p><img src="https://static.chanx.tech/image/TvkFb6k18ot4N9xEms8ccWY2naf.png"></p><p><strong>一般其他远程<strong><strong>仓库</strong></strong>到这已经配置完成了</strong></p><p>但是 Github 还需要另外配置：</p><p>打开上一步提到的 。ssh 文件夹路径 <code>/c/Users/chanx/.ssh</code>（因人而异）</p><p>给其中名字为 config 文件添加以下内容并保存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Host</span> github.<span class="hljs-property">com</span><br>  <span class="hljs-title class_">Hostname</span> ssh.<span class="hljs-property">github</span>.<span class="hljs-property">com</span><br>  <span class="hljs-title class_">Port</span> <span class="hljs-number">443</span><br>  <span class="hljs-title class_">User</span> git<br></code></pre></td></tr></table></figure><p><code>Git Bash</code> 执行以下命令，中间过程输入 <code>yes</code> 进行二次确认，看见如图提示即为配置完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="https://static.chanx.tech/image/NkosbmGFhoGkaGx3zelcdXy9nsC.png"></p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="为什么不直接安装某个版本的-Node-js？"><a href="#为什么不直接安装某个版本的-Node-js？" class="headerlink" title="为什么不直接安装某个版本的 Node.js？"></a>为什么不直接安装某个版本的 Node.js？</h2><p>nvm 可以控制管理 Node.js 版本，<strong>快速切换版本以支持不同的场景</strong>，比如：</p><ul><li>开发时需要使用稳定的 LTS 版本，不同项目需要使用不同的 Node.js 版本</li><li>其他场景可以使用最新的 latest 版本，体验 Node.js 新特性</li></ul><h2 id="安装-nvm-windows"><a href="#安装-nvm-windows" class="headerlink" title="安装 nvm-windows"></a>安装 nvm-windows</h2><p>访问<a href="https://github.com/coreybutler/nvm-windows/releases">下载地址</a>，下载最新版本的 <strong>nvm-setup.exe</strong>，下载完成直接运行安装即可</p><h3 id="配置镜像地址"><a href="#配置镜像地址" class="headerlink" title="配置镜像地址"></a>配置镜像地址</h3><p>nvm 默认的下载地址是 <a href="http://nodejs.org/dist/">http://nodejs.org/dist/ </a>，这是国外的服务器，在国内下载速度很慢</p><p>但是来自阿里的国内镜像站拯救了我们，感谢阿里（笑</p><p><strong>方法一（推荐）：</strong></p><p>打开任意控制台终端（比如 CMD），执行以下命令</p><ul><li><code>nvm node_mirror ``https://npmmirror.com/mirrors/node/</code></li><li><code>nvm npm_mirror ``https://registry.npmmirror.com</code></li></ul><p><strong>方法二：</strong><br>在 nvm 的安装路径下，找到 settings.txt** **打开，加上</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">node_mirror:  https:<span class="hljs-regexp">//</span>npmmirror.com<span class="hljs-regexp">/mirrors/</span>node/<br>npm_mirror:  https:<span class="hljs-regexp">//</span>registry.npmmirror.com<br></code></pre></td></tr></table></figure><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>上一步已经安装 nvm，下面执行 nvm 的命令完成 Node.js 的安装</p><ol><li><code>nvm list available</code> 获取当前可用的 node 版本</li><li><code>nvm install 版本号</code> 就可以安装指定版本的 node（根据项目安装对应的版本</li><li><code>nvm use 版本号</code> 就可以切换到该版本的 node 环境</li><li><code>nvm list</code> 获取当前已安装的 node 版本列表</li><li><code>nvm -v</code> 获取当前 nvm 的版本</li></ol><p>这里有个小技巧快速安装某个大版本的 node（比如 node18）</p><ul><li><code>nvm install v18</code></li><li><code>nvm use v18</code></li></ul><p><img src="https://static.chanx.tech/image/CForbTHAwotIXyxgn3PcTRPzn5d.png"></p><h2 id="npm-包管理器"><a href="#npm-包管理器" class="headerlink" title="npm 包管理器"></a>npm 包管理器</h2><p>Nodejs 安装时默认会附带安装 npm，此时镜像源是国外的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更换国内源</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><span class="hljs-comment"># 查询配置是否成功</span><br>npm config get registry<br></code></pre></td></tr></table></figure><p>目前实际使用中，更多会使用到 <code>yarn</code> 和 <code>pnpm</code> 两个包管理器，也需要安装和配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装yarn</span><br>npm i -g yarn<br><span class="hljs-comment"># 查看 yarn 版本</span><br>yarn -v<br><span class="hljs-comment"># 更换国内源</span><br>yarn config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><span class="hljs-comment"># 查询配置是否成功</span><br>yarn config get registry<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 pnpm</span><br>npm i -g pnpm<br><span class="hljs-comment"># 查看 pnpm 版本</span><br>pnpm -v<br><span class="hljs-comment"># 更换国内源</span><br>pnpm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br><span class="hljs-comment"># 查询配置是否成功</span><br>pnpm config get registry<br></code></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol><li>遇到如图报错“禁止运行脚本”，执行以下指令更改策略，<a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3">详情可见</a></li></ol><p><img src="https://static.chanx.tech/image/ULZMblvT5oKlZkx3zGQcYssznzf.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser<br></code></pre></td></tr></table></figure><ol><li><code>npm i</code> 安装长时间卡在 idealTree buildDeps 这一步不动</li></ol><p>按一下顺序尝试：<code>npm cache clean</code> 清除 npm 缓存、nvm 重新安装 node、nvm 更换 node 版本</p><h1 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h1><p>访问<a href="https://code.visualstudio.com/"> VSCode 官网</a>，下载安装包，正常运行安装即可</p><h2 id="推荐安装字体"><a href="#推荐安装字体" class="headerlink" title="推荐安装字体"></a>推荐安装字体</h2><p>JetBrains Mono: <a href="https://www.jetbrains.com/lp/mono/">https://www.jetbrains.com/lp/mono/</a></p><ol><li>下载解压后，双击 **ttf **文件内任一打开，点击左上角安装按钮即可</li></ol><p>区别是文字的粗细和斜体，我目前使用的是 **JetBrainsMono-Regular.ttf **</p><p><img src="https://static.chanx.tech/image/Sa9FbCphgoDuCExMyfOcWc8Hn2f.gif"></p><ol><li>安装后打开 VSCode -&gt; 设置 -&gt; Editor: Font Family，在前面加入 <code>JetBrains Mono,</code> 或直接使用以下内容覆盖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">JetBrains Mono, Consolas, <span class="hljs-string">&#x27;Courier New&#x27;</span>, monospace<br></code></pre></td></tr></table></figure><p><img src="https://static.chanx.tech/image/RLtWbNMUUoPvEwx3jwpcLu3gnAc.gif"></p><h2 id="推荐安装插件"><a href="#推荐安装插件" class="headerlink" title="推荐安装插件"></a>推荐安装插件</h2><table><thead><tr><th>序号</th><th>插件名</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese （Simplified） （简体中文） Language Pack for Visual Studio Code</a></td><td>官方的汉化包，老玩家直接默认英文</td><td></td></tr><tr><td>2</td><td><a href="https://marketplace.visualstudio.com/items?itemName=bierner.color-info">Color Info</a></td><td>代码显示色值信息</td><td></td></tr><tr><td>3</td><td><a href="https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons">vscode-icons</a></td><td>更多图标</td><td></td></tr><tr><td>4</td><td><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></td><td>代码静态检查和修复工具</td><td></td></tr><tr><td>5</td><td><a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize">filesize</a></td><td>显示当前文件的体积</td><td></td></tr><tr><td>6</td><td><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a></td><td>显示 git 相关的信息，常用的是显示当前行的提交记录</td><td></td></tr><tr><td>7</td><td><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense">npm Intellisense</a></td><td>import 语句中自动补充 npm 模块名</td><td></td></tr><tr><td>8</td><td><a href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete">Path Autocomplete</a></td><td>提供代码路径自动补全</td><td></td></tr><tr><td>9</td><td><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Vue Language Features (Volar)</a></td><td>Vue、Vitepress 和 petite-vue 构建的语言支持扩展</td><td></td></tr><tr><td>10</td><td><a href="https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin">TypeScript Vue Plugin (Volar)</a></td><td>为。vue 文件提供 ts 检查</td><td></td></tr><tr><td>11</td><td><a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">Code Spell Checker</a></td><td>检查代码的命名错误</td><td></td></tr></tbody></table><h1 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h1><p><a href="https://www.jetbrains.com/webstorm/">https://www.jetbrains.com/webstorm/</a></p><p>WebStorm 也是较为常见的前端开发工具，相比于 VSCode 来说会更加智能</p><p>因常用编辑为 VSCode，这里不赘述。</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何入门开源文档翻译</title>
    <link href="/2022/9865f7dac7c8/"/>
    <url>/2022/9865f7dac7c8/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要翻译？"><a href="#为什么要翻译？" class="headerlink" title="为什么要翻译？"></a>为什么要翻译？</h1><h2 id="给正版文档贡献"><a href="#给正版文档贡献" class="headerlink" title="给正版文档贡献"></a>给正版文档贡献</h2><blockquote><p>Jest 中文文档、Yarn 中文文档、npm 中文文档…</p></blockquote><h3 id="虚假的-Jest-文档"><a href="#虚假的-Jest-文档" class="headerlink" title="虚假的 Jest 文档"></a>虚假的 Jest 文档</h3><p>（来自百度第一<br>优点：百度排名第一，中文；缺点：除了优点都是缺点</p><p><img src="https://img.chanx.tech/i/2023/07/15/nr088v_0.png" alt="Pasted image 20230715143445"><br><img src="https://img.chanx.tech/i/2023/07/15/nr5uo7_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/nr74y5_0.png" alt="image.png"></p><h3 id="真实的-Jest-文档"><a href="#真实的-Jest-文档" class="headerlink" title="真实的 Jest 文档"></a>真实的 Jest 文档</h3><p>优点：谷歌排名第一、信息最新；缺点：百度排名不是第一，中文不一定对<br><img src="https://img.chanx.tech/i/2023/07/15/nsvdab_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/nswhcf_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/nsxkpl_0.png" alt="image.png"></p><h2 id="省钱小妙招"><a href="#省钱小妙招" class="headerlink" title="省钱小妙招"></a>省钱小妙招</h2><p><img src="https://img.chanx.tech/i/2023/07/15/ntdin8_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/ntenrp_0.png" alt="image.png"></p><h2 id="拯救下一个同学"><a href="#拯救下一个同学" class="headerlink" title="拯救下一个同学"></a>拯救下一个同学</h2><p>比如更新滞后的MDN中文文档，按照中文的信息来得加半天的debug时间（笑<br><img src="https://img.chanx.tech/i/2023/07/15/nth2hf_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/nthydx_0.png" alt="image.png"></p><h1 id="哪里可以贡献翻译？"><a href="#哪里可以贡献翻译？" class="headerlink" title="哪里可以贡献翻译？"></a>哪里可以贡献翻译？</h1><p><img src="https://img.chanx.tech/i/2023/07/15/nu26l8_0.png" alt="image.png"></p><h2 id="独立维护文档站点"><a href="#独立维护文档站点" class="headerlink" title="独立维护文档站点"></a>独立维护文档站点</h2><p>独立站点一般是直接整个网站镜像，然后翻译。</p><p>也有的是按自己的思路来翻译，这种一般多为GitBook</p><blockquote><p>下图分别是印记中文，官网。镜像的方式，长得一样</p></blockquote><p><img src="https://img.chanx.tech/i/2023/07/15/nu80vw_0.png" alt="image.png"></p><p><img src="https://img.chanx.tech/i/2023/07/15/nujwht_0.png" alt="image.png"></p><h2 id="基于MR形式"><a href="#基于MR形式" class="headerlink" title="基于MR形式"></a>基于MR形式</h2><blockquote><p><a href="https://github.com/reactjs/zh-hans.reactjs.org/issues">Issues · reactjs&#x2F;zh-hans.reactjs.org</a></p><p><a href="https://github.com/vuejs-translations/docs-zh-cn">GitHub - vuejs-translations&#x2F;docs-zh-cn: Vue 文档官方中文翻译 ｜ Official Chinese translation for Vue docs</a></p></blockquote><p>翻译步骤：</p><ol><li><p>维护团队将原文档进行划分</p></li><li><p>贡献者提交<strong>该模块翻译****MR</strong></p></li><li><p>严格的 review 环节</p></li><li><p>代码合入，翻译完成</p></li></ol><p>比如<a href="https://github.com/reactjs/zh-hans.reactjs.org/pull/870">https://github.com/reactjs/zh-hans.reactjs.org/pull/870</a></p><p><img src="https://img.chanx.tech/i/2023/07/15/nvxi0k_0.png" alt="image.png"><br><img src="https://img.chanx.tech/i/2023/07/15/nvylvy_0.png" alt="image.png"></p><h2 id="基于第三方平台"><a href="#基于第三方平台" class="headerlink" title="基于第三方平台"></a>基于第三方平台</h2><p><a href="https://crowdin.com/">https://crowdin.com/</a></p><p>crowdin是一个文案翻译平台，按句子的粒度切割文案进行翻译。</p><p>在某些情况下这是个缺点，比如语言习惯不同、基于语境的翻译，表述不一定跟原文句子一致。<br><img src="https://img.chanx.tech/i/2023/07/15/nw1ben_0.png" alt="image.png"></p><p><img src="https://img.chanx.tech/i/2023/07/15/nwc6jp_0.png" alt="image.png"></p><p>翻译步骤：</p><ol><li><p><code>Crowdin</code>平台加入对应项目</p></li><li><p>选择翻译语言后<strong>按句翻译</strong></p></li><li><p>保存，翻译完成</p></li></ol><h1 id="翻译中需要注意什么？"><a href="#翻译中需要注意什么？" class="headerlink" title="翻译中需要注意什么？"></a>翻译中需要注意什么？</h1><blockquote><p>翻译实际上是译者根据原文进行的二次创作</p></blockquote><h2 id="遣词"><a href="#遣词" class="headerlink" title="遣词"></a><strong>遣词</strong></h2><ul><li><p>正确使用专业术语</p><ul><li><p>合理地使用常见术语可以降低沟通成本</p></li><li><p>不要使用过于小众或自创的术语</p></li><li><p>必要时提供对照的英文术语以方便理解</p></li><li><p>避免无上下文的缩略词</p></li></ul></li></ul><blockquote><p><img src="https://img.chanx.tech/i/2023/07/15/nxry49_0.png" alt="image.png"><br>赛普拉斯？Cypress！傀儡师？Puppeteer！笑话？Jest！</p><p>争议：<a href="https://zhuanlan.zhihu.com/p/245223836?utm_source=wechat_session">《JavaScript高级程序设计（第4版）》的“期约”败笔</a></p></blockquote><ul><li><p>省略程度副词</p><ul><li>不管作者意图为何， “非常重要” 和 “重要” 在读者看来大同小异</li></ul></li><li><p>不要使用过于生僻的词汇，不要过度使用书面语</p></li></ul><h2 id="造句"><a href="#造句" class="headerlink" title="造句"></a><strong>造句</strong></h2><ul><li><p>尽量使用短句，不要使用多从句的复杂句式</p></li><li><p>去掉无意义的修饰，去掉试图缓和语气的从句</p><blockquote><p>反例：“我们可以看到， 数据库在一定程度上可以满足我们对事务支持的需求。”</p><p>修改后：“数据库支持事务”</p></blockquote><blockquote><p>反例： “MR 提交信息作为读者查阅修改历史时第一时间看到的信息，其重要性不言而喻。”</p><p>修改后：“读者查阅修改历史时会首先关注 MR 提交信息。”  </p></blockquote></li><li><p>语气要冷静。避免过于口语化</p><ul><li><p>不要加顺口溜</p></li><li><p>不要使用语气词</p></li></ul></li><li><p>准确并客观地描述事实，避免加入主观情绪</p></li></ul><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><blockquote><p>中文文案排版指北<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">GitHub - sparanoid&#x2F;chinese-copywriting-guidelines: Chinese copywriting guidelines for better written</a></p><p><a href="https://github.com/reactjs/zh-hans.reactjs.org/wiki/React-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E8%AF%91%E6%96%87%E6%8E%92%E7%89%88%E6%8C%87%E5%8D%97">React 中文文档译文排版指南 · reactjs&#x2F;zh-hans.reactjs.org Wiki</a></p></blockquote><p><strong>中英文之间需要增加空格</strong></p><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p><strong>中文与数字之间需要增加空格</strong></p><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><p><strong>数字与单位之间需要增加空格</strong></p><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度数／百分比与数字之间不需要增加空格</p><h1 id="我的翻译小插曲"><a href="#我的翻译小插曲" class="headerlink" title="我的翻译小插曲"></a>我的翻译小插曲</h1><ol><li><strong>结合上下文</strong></li></ol><p>原文：</p><p>The <code>expect</code> function is used every time you want to test a value. You will rarely call <code>expect</code> by itself. Instead, you will use <code>expect</code> along with a “matcher” function to assert something about a value.</p><p>机翻：</p><p>每次要测试一个值，你需要使用<code>expect</code>函数。你大概率不需要自己调用<code>expect</code>。相反，你通常会使用<code>expect</code>配合<code>matcher</code>函数来断言某个值</p><p>尝试修改：</p><p><code>expect</code>用于测试一个值。通常会结合<code>matcher</code>函数来断言某个值，而不是单独使用<code>expect</code>。</p><ol start="2"><li><strong>特有名词</strong></li></ol><p><code>Fake Timers</code>、<code>Mock</code>该不该进行翻译</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ol><li><p>提高阅读全英文档的能力</p></li><li><p>提高技术文档写作的能力</p></li><li><p>发现不常用但有用的配置</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页性能优化 - 加载速度</title>
    <link href="/2021/304b788fb6bc/"/>
    <url>/2021/304b788fb6bc/</url>
    
    <content type="html"><![CDATA[<p>测试工具：</p><ol><li><a href="http://webpagetest.org/">http://webpagetest.org/</a></li><li>Chrome-devtools-lighthouse</li><li>…</li></ol><h2 id="性能关键词"><a href="#性能关键词" class="headerlink" title="性能关键词"></a><strong>性能关键词</strong></h2><ol><li>First Contentful Paint：<strong>FCP</strong>，首屏渲染时间</li><li>Largest Contentful Paint : <strong>LCP</strong>，最大内容渲染时间</li><li>Speed Index：代表页面内容渲染所消耗的时间</li><li>Time to Interactive：TTI，用户与页面可交互时间</li><li>Total Blocking Time：TBT，衡量从FCP到TTI之间主线程被阻塞时长的总和</li></ol><blockquote><p>主线程执行的任务分为长任务和短任务。规定持续时间超过50ms的任务为长任务，低于50ms的任务为短任务。长任务中超过50ms的时间被认为是“阻塞”的，因此，TBT是所有长任务中阻塞时间的总和。</p></blockquote><ol start="6"><li>Cumulative Layout Shift：累计布局偏移，指网页布局在加载期间的偏移量</li></ol><p><strong>并发可以加快速度？</strong></p><p>一个文件通过一个连接传输快，还是通过多个连接传输快？显然在「多连接传输的收益 &gt; 建立连接的成本」条件成立下，必然是多连接传输快，也就是<strong>并发</strong>。</p><p>浏览器对同源HTTP&#x2F;1.1连接的并发个数有限制，典型值是6，测试表明Chrome和Firefox都是这个值。根据实际情况充分利用最大连接数，可以让速度更快，文件分片上传&#x2F;下载就是常见的情况。</p><blockquote><p>解决最大连接数有常见几种方案</p><ul><li>域名分片（就是多搞些不同的域名，打破同源条件）</li><li>websocket（限制数相对较高）</li><li><a href="https://sanyuan0704.github.io/my_blog/http/017.html#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">HTTP&#x2F;2多路复用</a></li></ul></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>下面评测结果均为Chrome浏览器开发者工具内置的<strong>LightHouse</strong>得出</p><p>Q:  不同服务器硬件条件不一，LightHouse如何保证结果的稳定？</p><p>A: 它会模拟出一个尽可能相同的环境，然后自动模拟用户访问。但是受当时的服务器状态和网络条件影响，仍然会有测试误差。</p><h2 id="FCP-优化"><a href="#FCP-优化" class="headerlink" title="FCP 优化"></a>FCP 优化</h2><h3 id="Gzip动态压缩"><a href="#Gzip动态压缩" class="headerlink" title="Gzip动态压缩"></a>Gzip动态压缩</h3><ol><li>这是未开启压缩进行测试的结果截图</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/tecgj_0.png" alt="img"></p><p><img src="https://img.chanx.tech/i/2022/06/12/tea40_0.png" alt="img"></p><p>需要加载的各个文件都比较大，首次加载十分缓慢；二次加载时有缓存的支持，表现相对较好。</p><p>一般网页加载使用的文件大小在200kb左右，以便利用<strong>并发请求</strong>加快网页的加载速度（HTTP&#x2F;1.1）。</p><p>查看<code>Network</code>可以看到需要处理的文件<code>Coding.js</code>、<code>student.js</code>、<code>Personal.js</code>；</p><p>查看产物目录下<code>report.html</code>，使用<code>Gzip</code>压缩可以大幅度减少文件的体积</p><p><img src="https://img.chanx.tech/i/2022/06/12/te9fs_0.png" alt="img" style="zoom:50%;" /><img src="https://img.chanx.tech/i/2022/06/12/teazg_0.png" alt="img" style="zoom:50%;" /></p><ol start="2"><li>进行Nginx的配置，开启<code>Gzip</code>压缩</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Nginx"><span class="hljs-section">http</span> &#123;<br>        <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">gzip_min_length</span>  <span class="hljs-number">1k</span>;<br>        <span class="hljs-attribute">gzip_buffers</span>     <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br>        <span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-attribute">gzip_types</span>     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;<br>        <span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">gzip_proxied</span>   expired <span class="hljs-literal">no</span>-cache <span class="hljs-literal">no</span>-store private auth;<br>        <span class="hljs-attribute">gzip_disable</span>   <span class="hljs-string">&quot;MSIE [1-6]\.&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>配置后，查看是否生效</li></ol><img src="https://img.chanx.tech/i/2022/06/12/vsekn_0.png" alt="image-20220612005339741" style="zoom:50%;" /><ol start="4"><li><code>LightHouse</code>进行测试</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/tea1q_0.png" alt="img"></p><p><img src="https://img.chanx.tech/i/2022/06/12/tei5k_0.png" alt="img"></p><p>开启Gzip压缩后测试：文件的体积大幅度减小，首屏加载时间FCP也从<strong>4s变为了1.2s</strong></p><h3 id="Gzip静态压缩"><a href="#Gzip静态压缩" class="headerlink" title="Gzip静态压缩"></a>Gzip静态压缩</h3><p>上面提及了Gzip的动态压缩，在请求到达的时候匹配到相应的压缩规则进行压缩，尽可能的降低文件大小来提高加载速度，实际上就是一个用服务器<strong>计算性能换取网络性能</strong>的操作。</p><p>假设缓存失效，大量访问涌入服务器将会占用大量的计算资源用以压缩；而静态资源文件没有变化，无需每次访问都重新压缩，于是就可以有「一次压缩，多次使用」的方法，即「<strong>静态压缩</strong>」。</p><ol><li>配置Nginx服务器，开启静态压缩</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Nginx"><span class="hljs-section">http</span> &#123;<br>        <span class="hljs-attribute">gzip_static</span> <span class="hljs-literal">on</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>配置webpack，输出经过gzip压缩的产物</li></ol><p>安装<code>compression-webpack-plugin</code>插件<code>yarn add compression-webpack-plugin -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// vue-cli项目配置vue.config.js</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CompressionWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;compression-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> productionGzipExtensions = <span class="hljs-regexp">/\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i</span>;<br><br><span class="hljs-attr">configureWebpack</span>: &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressionWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[path][base].gz&quot;</span>, <span class="hljs-comment">// 输出的文件名称</span><br>      <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&quot;gzip&quot;</span>,    <span class="hljs-comment">// 压缩算法</span><br>      <span class="hljs-attr">test</span>: productionGzipExtensions, <span class="hljs-comment">// 文件名匹配规则</span><br>      <span class="hljs-attr">threshold</span>: <span class="hljs-number">10240</span>,    <span class="hljs-comment">// 压缩的文件最小值</span><br>      <span class="hljs-attr">minRatio</span>: <span class="hljs-number">0.8</span>,    <span class="hljs-comment">// 压缩的最小压缩率，压缩率较低的不压缩</span><br>      <span class="hljs-attr">deleteOriginalAssets</span>: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 压缩后删除源文件</span><br>    &#125;),<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：出现<code>Cannot read property &#39;tapPromise&#39; of undefined</code>错误提示的请<strong>降低插件的版本</strong></p><ol start="3"><li>部署服务器，查看是否生效</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/teemm_0.png" alt="img"></p><ol start="4"><li>使用<code>LightHouse</code>进行测试</li></ol><p>加载速度没有明显的变化，想想应该是存在并发量才能观察出来差异，这里不再深入</p><h3 id="第三方库按需引入"><a href="#第三方库按需引入" class="headerlink" title="第三方库按需引入"></a>第三方库按需引入</h3><p>使用element-ui、echarts等第三方库时，可以根据相应的文档使用按需引入，减少无用代码打包</p><h3 id="第三方库使用CDN引入"><a href="#第三方库使用CDN引入" class="headerlink" title="第三方库使用CDN引入"></a>第三方库使用CDN引入</h3><p><code>student.js</code>的加载直接影响FCP，而<code>Coding.js</code>和<code>Personal.js</code>通过<code>prefetch</code>进行预加载</p><p>所以想进一步提高首次加载速度，需要考虑优化<code>student.js</code></p><p>vue-cli下自带prefetch和preload的优化，优化时可以<a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#prefetch">关闭相应的优化</a>便于查看首次加载文件</p><p>单页应用时：config.plugins.delete(‘prefetch’)</p><p>多页应用时：config.plugins.delete(‘prefetch-XXX’) 关闭对应页面XXX的prefetch插件</p><p><img src="https://img.chanx.tech/i/2022/06/12/tep2m_0.png" alt="img"></p><ol><li>查看<code>report.html</code>中<code>student.js</code>的构成</li></ol><p>可以看到<code>element-ui</code>的体积占用较高；结合项目实际使用情况，项目内已使用的组件较多，按需加载优化效果不明显；而组件库作为必要依赖且一般不会变化，可以考虑抽离<strong>使用模板HTML引入（又称CDN引入）</strong>。</p><blockquote><p>有什么作用？使用外部免费CDN，加载速度较快，可以减少服务器的负载；公共依赖，利用缓存可以提高加载速度；但是需要注意的是外部免费CDN存在宕机(见附录)等隐患，可以通过切换备用CDN恢复，若不能接受此类情况，也可以把文件放在自己的服务器上；</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 引入多个CDN进行备份 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/element-ui/2.15.7/index.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span> ||</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js&quot;&gt;&lt;\/script&gt;&#x27;</span></span><br><span class="language-javascript">    );</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-property">ELEMENT</span> ||</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(</span><br><span class="language-javascript">      <span class="hljs-string">&#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/element-ui@2.15.7/lib/index.min.js&quot;&gt;&lt;\/script&gt;&#x27;</span></span><br><span class="language-javascript">    );</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置webpack，在<code>build</code>的时候不打包<code>element-ui</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 入口文件</span><br><span class="hljs-keyword">import</span> <span class="hljs-variable constant_">ELEMENT</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-variable constant_">ELEMENT</span>);<br><br><span class="hljs-comment">// vue-cli项目下配置vue.config.js文件</span><br><span class="hljs-attr">configureWebpack</span>: &#123;<br>  <span class="hljs-attr">externals</span>: &#123;<br>    <span class="hljs-string">&quot;element-ui&quot;</span>: <span class="hljs-string">&quot;ELEMENT&quot;</span>,<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 模板HTMl文件</span><br>&lt;head&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/element-ui@2.15.7/lib/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/element-ui@2.15.7/lib/theme-chalk/index.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span></span><br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><p>此时需要注意项目中<strong>非Vue组件</strong>下引入组件库的方式都需要<strong>改为全部引入</strong>，避免webpack识别不了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 某js文件原来</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Message</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui/packages/message/src/main&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MessageBox</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><br><span class="hljs-comment">// 修改后</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElEMENT</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span>;<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">MessageBox</span>, <span class="hljs-title class_">Message</span> &#125; = <span class="hljs-title class_">ElEMENT</span>;<br><br><span class="hljs-comment">// 样式通过</span><br></code></pre></td></tr></table></figure><ol start="3"><li>再次<code>build</code>，查看<code>report.html</code>文件，组件库成功抽离</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/teqcm_0.png" alt="img"></p><ol start="4"><li>部署到服务器上，使用<code>LightHouse</code>进行测试</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/tef6b_0.png" alt="img"></p><p>利用外部CDN加载，首次加载速度FCP又有部分提高</p><blockquote><p>假设不使用外部CDN引入，加载速度会受限于服务器条件</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p><code>build</code>时路由的每个组件各自打包，使用**<a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports">动态导入</a>**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-keyword">const</span> routes = [<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Login&quot;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;Login&#x27; */</span> <span class="hljs-string">&quot;@student/views/HomePage/Login&quot;</span>),<br>&#125;,<br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/register&quot;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Register&quot;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;Register&#x27; */</span> <span class="hljs-string">&quot;@student/views/HomePage/Register&quot;</span>),<br>&#125;,<br>]<br></code></pre></td></tr></table></figure><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">动态组件 &amp; 异步组件 — Vue.js</a> 实际上也是上面提到的动态导入</p><blockquote><p>以Coding页面为例</p></blockquote><img src="https://img.chanx.tech/i/2022/06/12/v85up_0.png" alt="image-20220612005244299" style="zoom:50%;" /><p>![](<a href="https://img.chanx.tech/i/2022/06/12/tefc3_0.png">https://img.chanx.tech/i/2022/06/12/tefc3_0.png</a></p><p><img src="https://img.chanx.tech/i/2022/06/12/teq8z_0.png" alt="img"></p><p>在使用路由懒加载后，按路由级别对js进行了拆包，每一个路由都是一个新的js，但是仍然存在单个路由过多组件导致的包体积过大问题。像上图<code>Coding.js</code>经过<code>gzip压缩</code>后还有<code>2.9MB</code>，严重影响到页面的首次加载和渲染（进入Coding页需要等待2-3s加载），需要对这个文件进行下一步的优化；</p><p>查看<code>report.html</code>，观察文件内各个内容的占用；</p><p><img src="https://img.chanx.tech/i/2022/06/12/teoje_0.png" alt="img"></p><p>首先看到整个文件可以大致分为四块：<code>sv.js</code>、<code>ace-builds</code>、<code>swiper</code>、<code>splitpanes</code>；分别代表的是可视化面板、编辑器、测试数据面板、分割面板组件。</p><p><img src="https://img.chanx.tech/i/2022/06/12/texwq_0.png" alt="img"></p><p><code>Coding.js</code>中引入可视化面板、堆栈面板、监视面板。它们在调试状态下并不会被使用到，也就是说页面首次加载时加载了部分无用内容。使用<strong>异步组件</strong>将这几个面板拆出来，让它们在进入调试状态下才去加载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">DebugPane</span> = (<span class="hljs-params"></span>) =&gt;<br>  <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;debug-pane&#x27; */</span> <span class="hljs-string">&quot;@student/components/debug-button-bar.vue&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">VisualPane</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>  <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<br>    <span class="hljs-comment">/* webpackChunkName: &#x27;visual-pane&#x27; */</span> <span class="hljs-string">&quot;@student/components/visual-components/visual-pane.vue&quot;</span><br>  ),<br>  <span class="hljs-attr">loading</span>: <span class="hljs-title class_">LoadingComponent</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">stackVariateShow</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>  <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<br>    <span class="hljs-comment">/* webpackChunkName: &#x27;stack-pane&#x27; */</span> <span class="hljs-string">&quot;@student/components/stack-variate/data-controller.vue&quot;</span><br>  ),<br>  <span class="hljs-attr">loading</span>: <span class="hljs-title class_">LoadingComponent</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">WatchPane</span> = (<span class="hljs-params"></span>) =&gt; (&#123;<br>  <span class="hljs-attr">component</span>: <span class="hljs-title function_">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;watch-pane&#x27; */</span> <span class="hljs-string">&quot;@student/components/watch-pane.vue&quot;</span>),<br>  <span class="hljs-attr">loading</span>: <span class="hljs-title class_">LoadingComponent</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://img.chanx.tech/i/2022/06/12/tet47_0.png" alt="img"></p><p>拆完包之后我们打开页面验证一下：</p><p><img src="https://img.chanx.tech/i/2022/06/12/teqza_0.png" alt="img"></p><p><img src="https://img.chanx.tech/i/2022/06/12/teq7g_0.png" alt="img"></p><p>可以看到在进入页面时多加载了几个js文件，单个文件的体积比较小，没有超过200K</p><p>Coding页面的首次加载优化已经算完成了，继续看看调试状态下的加载</p><p><img src="https://img.chanx.tech/i/2022/06/12/ter49_0.png" alt="img"></p><p>点击调试后开始加载这几个组件，<code>visual-pane</code>因为<code>sv.js</code>的存在所以体积还是相对较大；</p><p>后续还可以对<code>sv.js</code>进行优化：使用CDN引入、在<code>sv.js</code>构建的时候拆成多个包</p><blockquote><p>这里没有对<code>sv.js</code>进行下一步优化的原因是：</p><ul><li><code>sv.js</code>处于快速迭代状态，为了方便该模块开发者测试，所以暂不考虑构建成多个包；</li><li>使用CDN引入，一般适合变化不多的静态资源<br>当然，还是有方案解决的，感兴趣可以了解一下<code>monorepo</code>或者其他，这里不再赘述</li></ul></blockquote><p>拆包时需要注意拆出的模块是否存在代码耦合，比如说加载完成后执行某个函数，这是需要进行处理的：import(“XXX”).then(() &#x3D;&gt; { console.log(“加载完成执行的函数”); })</p><p>部署后使用LighntHouse进行测试</p><p><img src="https://img.chanx.tech/i/2022/06/12/tev2g_0.png" alt="img"></p><p>比较优化前后的测试结果：FCP从1.3s到1.0s，LCP从8s到2.7s</p><h3 id="使用HTTP-x2F-2"><a href="#使用HTTP-x2F-2" class="headerlink" title="使用HTTP&#x2F;2"></a>使用HTTP&#x2F;2</h3><p>HTTP&#x2F;2下二进制和流的特性可以加快网站的访问速度，需要服务器和浏览器的支持</p><p>目前主流浏览器均已支持HTTP&#x2F;2，服务器完成支持即可，需要配置<strong>HTTPS</strong>、<strong>Nginx</strong></p><h3 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h3><p>生产环境把<code>sourcemap</code>关了也能减小部分文件大小</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全文主要围绕网页加载速度，选定<strong>单页应用</strong>（SPA）常见的<strong>首屏渲染</strong>（FCP）问题作为优化点。</p><p>上面的几个点基本都在围绕「文件大小」进行优化，尽可能的减少单个文件体积，实际上还有隐藏在打包阶段进行的<code>tree shaking(删除无用代码)</code>、<code>uglily（压缩）</code>、内联资源等进行的优化；</p><p>另外就是算法、网络通信上提升传输效率，像上面提到的gzip、http2、cdn，还有dns、缓存等。</p><p>更进一步，网页加载速度不只是资源文件的下载速度，其实还包括下载后资源文件的解析、渲染等，这些牵扯到浏览器的运行机制，优化难度更大更复杂。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>CDN利用缓存提高速度，而不同CDN之间的缓存不能共用，有没有什么好的办法？</li></ol><blockquote><p>若浏览器支持类似contenthash形式的缓存，那么所有第三方缓存将会打通，所有引入第三方的网站访问速度都会提升。</p></blockquote><p>路由懒加载和异步组件实际上都是将单文件变为多文件，即「拆包」；</p><ol><li>那是不是首页变快了，后面每次点击都需要等待加载？用户体验不是更差？</li></ol><blockquote><p>这个跟应用实际情况有关系。拆包之后按需加载确实加快了首次访问，后续要等待加载这个却是可以优化的。<a href="https://cli.vuejs.org/zh/guide/html-and-static-assets.html#prefetch">Vue-cli项目打包默认加载prefetch和preload插件</a>，利用<code>**prefetch**</code>和<code>**preload**</code>属性，浏览器可以在后台进行无感的预加载，后续加载的时候就是使用<code>cache</code>了，反而让用户体验变得更好。当然，不排除某些情况下预加载没完成，这个时候做一个<code>loading</code>状态也不会影响体验。</p></blockquote><ol><li>拆包那么爽，那我全拆了不就行了吗？</li></ol><blockquote><p>拆包前先考虑原来的代码是否已经优化过，删除无用的代码和模块，无必要的拆包会增加文件数量和维护成本。如果拆出的包过小，反而会影响加载速度（HTTP&#x2F;1.1），不然为什么小图片加载会有<strong>雪碧图</strong>方案呢？</p></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>2021-12-20</p><p>jsdelivr挂掉<a href="https://www.v2ex.com/t/823281">https://www.v2ex.com/t/823281</a></p><img src="https://img.chanx.tech/i/2022/06/12/tf5yq_0.png" alt="img" style="zoom: 33%;" /><p>国内节点挂了至少八小时，影响了BootCDN（笑）、echarts、部分npm包等…很严重</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
      <tag>前端工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页DarkMode</title>
    <link href="/darkmode/"/>
    <url>/darkmode/</url>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>主题化功能长期存在，可供用户前端自行切换</p><ul><li>LightMode：日间模式、浅色模式、白色模式</li><li>DarkMode：夜间模式、深色模式、黑色模式</li></ul><blockquote><p>中文表达较多，下文默认使用英文表达</p></blockquote><p>色板：</p><p><a href="https://materialui.co/colors">https://materialui.co/colors</a></p><p><a href="https://tailwindcolor.com/">Tailwind Color Palette</a></p><p><a href="https://antv.vision/zh/docs/specification/language/palette">https://antv.vision/zh/docs/specification/language/palette</a></p><p><strong>Ant Design</strong>关于配色的</p><p><a href="https://ant.design/docs/spec/colors-cn">https://ant.design/docs/spec/colors-cn</a></p><p><a href="https://ant.design/docs/spec/dark-cn">https://ant.design/docs/spec/dark-cn</a></p><p><a href="https://github.com/ant-design/ant-design/blob/5ab2783ff00d4b1da04bb213c6b12de43e7649eb/components/style/color/colors.less">https://github.com/ant-design/ant-design/blob/5ab2783ff00d4b1da04bb213c6b12de43e7649eb/components/style/color/colors.less</a></p><p>Leetcode是如何做Darkmode的？</p><p>CSS中<code>var()</code>和<code>:root</code>。root设置默认色板，切换成darkmode时添加<code>.dark</code>类名，该类下有主题色板，优先级覆盖默认色板，达到切换效果。</p><blockquote><p>叫法：C - s - s，var（哇！）</p></blockquote><h2 id="现有方案"><a href="#现有方案" class="headerlink" title="现有方案"></a>现有方案</h2><p>可以按变量出现的时间分为<strong>运行时</strong>和<strong>编译时</strong>两种类型的方案</p><h3 id="运行时方案"><a href="#运行时方案" class="headerlink" title="运行时方案"></a>运行时方案</h3><ul><li>使用<code>css var</code>方式</li><li>使用<code>less</code>运行时方式，可以在线实时编译<code>less</code>代码</li><li>使用<code>js</code>操作样式代码</li></ul><h3 id="编译时方案"><a href="#编译时方案" class="headerlink" title="编译时方案"></a>编译时方案</h3><p>使用<code>css预处理器</code>，使用<code>scss/sass</code>、<code>less</code>等预处理器在项目构建时生成多套样式代码</p><h2 id="预期问题"><a href="#预期问题" class="headerlink" title="预期问题"></a>预期问题</h2><ol><li>项目内无样式规范，已有样式不统一</li><li><code>ElementUI</code>样式处理</li><li>是否存在特殊组件不希望被主题切换影响</li><li>主题化方案，及色板</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端工程化之Jenkins</title>
    <link href="/2021/7dfe4446384f/"/>
    <url>/2021/7dfe4446384f/</url>
    
    <content type="html"><![CDATA[<blockquote><p>下文安装通过「war安装包」安装，使用Docker安装方式可忽略本文</p></blockquote><p><img src="https://img.chanx.tech/i/2022/06/12/nvzng_0.png" alt="img"></p><h1 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h1><ol><li>安装Java环境</li><li>下载Jenkins的war包，<a href="https://www.jenkins.io/zh/download/">下载地址</a></li><li>运行war包<code>java -jar jenkins.war --httpPort=8080</code></li><li>打开<code>http://localhost:8080</code>，等待Jenkins启动</li><li>初次进入页面会要求输入初始密码，初始密码可以启动时在<code>shell</code>看到</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nw0j5_0.png" alt="img"></p><ol><li>跟随提示进行设置。设置管理员账户和密码、安装插件、设置网址等</li><li>完成</li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h3><table><thead><tr><th><a href="https://plugins.jenkins.io/envinject">Environment Injector Plugin</a></th><th>用于注入环境变量</th></tr></thead><tbody><tr><td><a href="https://plugins.jenkins.io/git-parameter">Git Parameter Plug-In</a></td><td>构建时选择git参数</td></tr><tr><td><a href="https://plugins.jenkins.io/publish-over-ftp">Publish Over FTP</a></td><td>执行FTP相关操作</td></tr><tr><td><a href="https://plugins.jenkins.io/publish-over-ssh">Publish Over SSH</a></td><td>执行Shell相关操作</td></tr><tr><td><a href="https://plugins.jenkins.io/nodejs">NodeJS Plugin</a></td><td>安装Nodejs环境</td></tr></tbody></table><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><ol><li>Jenkins服务器生成Git密钥，<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5">Git - 生成 SSH 公钥</a></li><li>将<code>id_dsa</code>私钥配置到Jenkins凭证当中</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nw3sc_0.png" alt="img"></p><ol><li>将<code>id_dsa.pub</code>公钥配置到Git Server中</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nw2z6_0.png" alt="img"><img src="https://img.chanx.tech/i/2022/06/12/nw2rp_0.png" alt="img"></p><h3 id="配置FTP-Server"><a href="#配置FTP-Server" class="headerlink" title="配置FTP Server"></a>配置FTP Server</h3><p><img src="https://img.chanx.tech/i/2022/06/12/nw3bb_0.png" alt="img"><img src="https://img.chanx.tech/i/2022/06/12/nvyl8_0.png" alt="img"></p><h3 id="配置Node环境"><a href="#配置Node环境" class="headerlink" title="配置Node环境"></a>配置Node环境</h3><p><img src="https://img.chanx.tech/i/2022/06/12/nw8qr_0.png" alt="img"><img src="https://img.chanx.tech/i/2022/06/12/nwa3q_0.png" alt="img"></p><h1 id="尝试新建一个构建项目"><a href="#尝试新建一个构建项目" class="headerlink" title="尝试新建一个构建项目"></a>尝试新建一个构建项目</h1><ol><li><p>新建构建项目，并进入配置页面</p></li><li><p>配置「构建前选择代码分支」（需要安装插件）</p></li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nwc4b_0.png" alt="img"></p><ol start="3"><li>配置Git仓库地址，没有凭证则需要添加</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nw8ep_0.png" alt="img"></p><ol start="4"><li>配置构建命令，通过Shell命令执行</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nw6ru_0.png" alt="img"></p><ol start="5"><li>构建后进行打包保存和FTP服务器部署</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nwgrz_0.png" alt="img"></p><ol start="6"><li>保存配置，执行构建</li></ol><p><img src="https://img.chanx.tech/i/2022/06/12/nwhz9_0.png" alt="img"></p><ol start="7"><li>等待构建完成</li></ol><p>一个简单的前端项目构建流程就是上面这些，除此之外可以通过Shell、插件、Jenkins自带的环境变量等实现更定制化的功能。比如<code>node_modules</code>的缓存提高构建速度、通过构建参数执行不同环境的打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 通过判断package.json的md5来确认是否需要yarn安装依赖</span><br>   CACHE_FOLDER=<span class="hljs-variable">$&#123;HOME&#125;</span>/md5_cache/md5<br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;EXECUTOR_NUMBER: <span class="hljs-variable">$&#123;EXECUTOR_NUMBER&#125;</span>&quot;</span><br>   MD5_FILE_NAME=package-json_<span class="hljs-variable">$&#123;EXECUTOR_NUMBER&#125;</span>.<span class="hljs-built_in">md5sum</span><br><br>   [ -d <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span> ] || <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span><br>   <span class="hljs-built_in">ls</span> <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span><br><br>   <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span>/<span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span> ];<span class="hljs-keyword">then</span><br>     <span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span>/<span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span> <span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span><br>     <span class="hljs-built_in">md5sum</span> package.json<br>     <span class="hljs-built_in">cat</span> <span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span><br>     <span class="hljs-built_in">md5sum</span> -c <span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span> || yarn<br>   <span class="hljs-keyword">else</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;No md5sum backup&quot;</span><br>     yarn<br>   <span class="hljs-keyword">fi</span><br><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;create new md5sum backup&quot;</span><br>   <span class="hljs-built_in">md5sum</span> package.json<br>   <span class="hljs-built_in">md5sum</span> package.json &gt; <span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span><br>   <span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;MD5_FILE_NAME&#125;</span> <span class="hljs-variable">$&#123;CACHE_FOLDER&#125;</span><br></code></pre></td></tr></table></figure><p><strong>总结：相比于Gitlab，Jenkins在代码管理并不擅长，更多是侧重于构建部署。</strong></p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下部署Minecraft服务器</title>
    <link href="/linux-minecraft-server/"/>
    <url>/linux-minecraft-server/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/moqianmoqian/article/details/105210028">xftp、xshell连接远程服务器，所选的用户密钥未在远程主机上注册_墨浅-CSDN博客</a></p><ol><li>连接<code>shell</code>和<code>ftp</code></li><li>下载<code>JAVA</code>并上传安装</li></ol><p>注意安装jdk8，高版本不兼容</p><ul><li>执行解压<code>tar -zxvf jdk-linux-x64.tar.gz</code></li><li>执行<code>vim /etc/profile</code>进入环境变量编辑，末尾加入下面配置并保存</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell">JAVA_HOME=/root/jdk1.8.0_131<br>CLASSPATH=$JAVA_HOME/lib/<br>PATH=$PATH:$JAVA_HOME/bin<br>export PATH JAVA_HOME CLASSPATH<br></code></pre></td></tr></table></figure><ul><li>重新加载配置<code>source /etc/profile</code></li><li>验证是否安装成功<code>java -version</code></li></ul><ol><li>上传服务端</li></ol><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">问题：These libraries failed <span class="hljs-keyword">to</span> download. <span class="hljs-keyword">Try</span> again.<br></code></pre></td></tr></table></figure><p>下载依赖不成功，需要单独下载相应的包</p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>重新认识 window.open()</title>
    <link href="/2021/55a7ff847dee/"/>
    <url>/2021/55a7ff847dee/</url>
    
    <content type="html"><![CDATA[<h1 id="window-open的返回值"><a href="#window-open的返回值" class="headerlink" title="window.open的返回值"></a>window.open的返回值</h1><p>重新认识一下这个函数<code>window.open(url, ``*windowName, windowFeatures)*</code></p><p>执行<code>window.open</code>函数，我们可以打开一个新的标签页</p><p><strong>其实，它是有返回值的，它返回新窗口的引用</strong><code>**WindowProxy**</code></p><p>通过返回值这个新窗口的引用，我们可以做一些符合同源策略的操作</p><blockquote><p>If the window couldn’t be opened, the returned value is instead <code>null</code>. The returned reference can be used to access properties and methods of the new window as long as it complies with <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same-origin policy</a> security requirements.</p></blockquote><p>那么，我们可以这么操作（A标签页下通过<code>window.open</code>打开B标签页）：</p><ul><li>A和B标签页同源的情况下，在A标签页通过<strong>新窗口引用</strong>操作B的<code>localStorage</code></li></ul><p><img src="https://img.chanx.tech/i/2022/06/15/12osuh7_0.png" alt="img"></p><ul><li>A和B标签页不同源的情况下，在A标签页通过<strong>新窗口引用</strong>操作B的<code>localStorage</code></li></ul><p><img src="https://img.chanx.tech/i/2022/06/15/12ot31t_0.png" alt="img"></p><p>学到了学到了，但是好像并没有什么用…</p><p>尝试一下改变<code>location</code>？<strong>你会发现标签页进行了跳转。</strong></p><p><img src="https://img.chanx.tech/i/2022/06/15/12ot89f_0.png" alt="img"></p><h1 id="window-opener"><a href="#window-opener" class="headerlink" title="window.opener"></a>window.opener</h1><p>上面讲的是「父标签页」操作「子标签页」，这里讲的就是相反的。</p><p>标签页在打开的时候会在<code>window.opener</code>存着对父标签页的引用</p><p>跟前面所讲到的一样，通过引用可以执行一些操作，比如修改父标签页的<code>location</code>达到重定向的效果</p><p>如果<code>window.open</code>打开的是一个恶意网址B，B修改A的<code>location</code>，就可以偷偷的把你的A转到钓鱼网址</p><h1 id="多种打开新标签页的方式"><a href="#多种打开新标签页的方式" class="headerlink" title="多种打开新标签页的方式"></a>多种打开新标签页的方式</h1><ol><li>带上<code>_blank</code>属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.feishu.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>打开新的标签页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>带上<code>_blank</code> 属性并且带 <code>opener</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.feishu.cn/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;opener&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>打开新的标签页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>带上 <code>_blank</code> 属性并且带<code>noopener</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.feishu.cn/&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>打开新的标签页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>window.open()</code> 且不清除 <code>opener</code> 的值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;link&quot;</span> onclick=<span class="hljs-string">&quot;openNewTabWithOpener()&quot;</span>&gt;打开新的标签页&lt;/span&gt;<br><br><span class="hljs-comment">// js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">openNewTabWithOpener</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;真实地址&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>window.open()</code>后再清除 <code>opener</code></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;link&quot;</span> onclick=<span class="hljs-string">&quot;openNewTabWithoutOpener()&quot;</span>&gt;打开新的标签页&lt;/span&gt;<br><br><span class="hljs-comment">// js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">openNewTabWithoutOpener</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">opener</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;真实地址&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>window.open()</code>时带 <code>noopener</code>属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;link&quot;</span> onclick=<span class="hljs-string">&quot;openNewTabWithoutOpener()&quot;</span>&gt;打开新的标签页&lt;/span&gt;<br><br><span class="hljs-comment">// js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">openNewTabWithoutOpener</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;真实地址&quot;</span>,<span class="hljs-string">&quot;_blank&quot;</span>,<span class="hljs-string">&quot;noopener&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="noopener一定要加上吗？"><a href="#noopener一定要加上吗？" class="headerlink" title="noopener一定要加上吗？"></a><code>noopener</code>一定要加上吗？</h1><ol><li><code>chrome88</code>版本对超链接的<code>rel</code>默认设置为<code>noopener</code></li></ol><blockquote><p>舒舒服服，默认就有，不用加了</p></blockquote><ol><li><code>chrome89</code>版本<code>noopener</code>终止<code>clone sessionStorage</code></li></ol><blockquote><p>要是登录态存在session，那<code>noopener</code>打开一个相同网址的标签页就要重新登录</p></blockquote><blockquote><p>上述新标签页打开方式3和6就受这条更新的影响</p></blockquote><p>所以，<code>noopener</code>并不是随便加的。在不确认新链接指向哪的时候，加上<code>noopener</code>比较稳妥；而在明确的可信链接指向下，加不加就看心情。</p><p>但是需要注意，由于<code>chrome89</code>版本的这一特性，标签页使用<code>a标签</code>还需要考虑加上<code>rel=&quot;opener&quot;</code>。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>在代码中执行<code>window.open</code>经常会被浏览器或者是一些插件认为上不友好的行为，然后被拦截</p><blockquote><p>想起被弹窗广告支配的时代吗？</p></blockquote><p>怎么优雅地用<code>JavaScript</code>打开一个新标签页？</p><p><strong>新建一个</strong><code>**&lt;a&gt;**</code><strong>并加上</strong><code>**noopener**</code><strong>属性,再触发点击</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript">&lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;link&quot;</span> onclick=<span class="hljs-string">&quot;openNewTab()&quot;</span>&gt;打开新的标签页&lt;/span&gt;<br><br><span class="hljs-comment">// js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">openNewTab</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> link = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>    link.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;真实地址&quot;</span>;<br>    link.<span class="hljs-property">rel</span> = <span class="hljs-string">&quot;noopener&quot;</span>;    <span class="hljs-comment">// 这个视情况决定</span><br>    link.<span class="hljs-property">target</span> = <span class="hljs-string">&quot;_blank&quot;</span>;<br>    link.<span class="hljs-title function_">click</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，除了<code>noopener</code>这一属性外，还有<code>noreferrer</code>属性来设置新标签页请求的<code>referer</code></p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端函数或请求的聚合</title>
    <link href="/2021/37d4d9cb8c51/"/>
    <url>/2021/37d4d9cb8c51/</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>某个请求被重复触发</li><li>某个函数被重复触发</li></ul><p>多次触发合并成一次，或一段时间内触发合并成一次。思路其实与<strong>节流</strong>类似</p><p>为什么？</p><ul><li>具体业务场景需要。如<code>element-ui</code>中上传组件多选文件会多次触发上传钩子，需要合并成一次上传</li><li>性能优化考虑。某个高频的http请求进行聚合，降低请求频率</li></ul><p><strong>先举个例子，某个上传函数被多次触发</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">upload</span> = (<span class="hljs-params">filename</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正式上传&quot;</span>, filename);<br>&#125;<br><br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;c&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>正式上传 a 正式上传 b 正式上传 c</p></blockquote><p>需求： 希望多个文件能放在一次正式上传</p><h2 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> file = [];<br><span class="hljs-keyword">const</span> upload = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> collect = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">filename</span>)&#123;<br>    file.<span class="hljs-title function_">push</span>(filename); <span class="hljs-comment">// 记录要上传的文件</span><br>    <span class="hljs-keyword">if</span>(!collect)&#123;<br>      collect = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正式上传&quot;</span>, file);<br>        collect = <span class="hljs-literal">null</span>;<br>      &#125;,<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;)();<br><br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;c&quot;</span>); <br></code></pre></td></tr></table></figure><blockquote><p>正式上传 [“a”, “b”, “c”]</p></blockquote><p><strong>思路：三次上传钩子实际上是同步代码，宏任务会在同步代码执行完成后再去触发。利用闭包记录下是否已经设置宏任务和需要上传的文件</strong></p><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> file = [];<br><span class="hljs-keyword">const</span> upload = (<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> collect = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">filename</span>)&#123;<br>    file.<span class="hljs-title function_">push</span>(filename);<br>    <span class="hljs-keyword">if</span>(!collect)&#123;<br>      collect = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正式上传&quot;</span>, file);<br>        collect = <span class="hljs-literal">null</span>;<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;)();<br><br><br><br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-title function_">upload</span>(<span class="hljs-string">&quot;c&quot;</span>); <br></code></pre></td></tr></table></figure><blockquote><p>正式上传 [“a”, “b”, “c”]</p></blockquote><p><strong>思路：其实跟宏任务一样，只不过<code>promise.then</code>会在同步代码后，<code>setTimeout</code>前触发</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总的来说，就是对原有的上传钩子进行了<strong>封装</strong>，或者叫<strong>代理</strong>。并利用<strong>事件循环</strong>的执行顺序，在合适的时机再去执行上传操作。</p><blockquote><p>Q：那是不是只有以上两种方案呢？当然不是。思路一致，但是实现各有不同。</p><p>A：比如说，知道触发次数，可以考虑使用计数器在最后一次触发；标记变量可以使用其他写法来实现；</p><p>Q：我只想聚合一部分，怎么办？</p><p>A：<code>setTimeout</code>设置时间；或者设置临界值再推几个宏&#x2F;微任务，注意记录文件做相应修改</p><p>Q：那异步触发的怎么去做聚合？</p><p>A：我可能是利用一下<code>Promise.all</code>吧。没有深入想，此处不多说。</p><p>说到聚合 + 性能优化，其实还有后端接口的聚合。利用中间层进行接口聚合，前端再去请求聚合后的接口，也能优化前端体验</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Element</tag>
      
      <tag>设计模式及应用</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS实现拖拽移动元素</title>
    <link href="/2020/7410f8b3a3b6/"/>
    <url>/2020/7410f8b3a3b6/</url>
    
    <content type="html"><![CDATA[<p><strong>实现的效果如图</strong></p><img src="https://img.chanx.tech/i/2022/06/12/a7gx3_0.gif" alt="录制_2020_11_23_20_10_35_670" style="zoom:50%;" /><p><strong>实现步骤：</strong></p><ul><li>鼠标按下时进入拖拽状态<code>onmousedown</code></li><li>鼠标移动时，如果是拖拽状态，则元素跟随移动<code>onmousemove</code></li><li>鼠标弹起或鼠标离开元素范围时退出拖拽状态<code>onmouseup</code>和<code>onmouseleave</code></li></ul><img src="https://img.chanx.tech/i/2022/06/12/a7f7o_0.png" style="zoom:50%;" /><p><strong>如何跟随移动？计算两个鼠标指针的距离差，然后应用到目标元素上</strong></p><p>需要注意的是（我没做的）：</p><ul><li>若是对鼠标点击有要求，需要判断是否为左键</li><li>若是对移动范围有要求，需要做相应处理禁止移动</li><li>若是对性能有要求，记得做<strong>防抖</strong>处理</li></ul><p>简单的实现拖拽代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>拖拽移动元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#tools</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">      <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">      <span class="hljs-attribute">cursor</span>: move;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tools&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> start = <span class="hljs-literal">null</span>;   <span class="hljs-comment">// 鼠标位置记录</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> isDrag = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 拖拽状态</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> tools = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tools&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 鼠标按下的时候记录初始鼠标位置</span></span><br><span class="language-javascript">    tools.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      start = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">x</span>: e.<span class="hljs-property">x</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">y</span>: e.<span class="hljs-property">y</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      isDrag = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 鼠标抬起时结束拖拽</span></span><br><span class="language-javascript">    tools.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      isDrag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 鼠标移出目标元素范围自动结束拖拽</span></span><br><span class="language-javascript">    tools.<span class="hljs-property">onmouseleave</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      isDrag = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 鼠标移动时移动目标元素</span></span><br><span class="language-javascript">    tools.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (isDrag) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 计算两次鼠标的位置差</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> distance = &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">x</span>: e.<span class="hljs-property">x</span> - start.<span class="hljs-property">x</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">y</span>: e.<span class="hljs-property">y</span> - start.<span class="hljs-property">y</span>,</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 移动目标元素</span></span><br><span class="language-javascript">        tools.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = tools.<span class="hljs-property">offsetLeft</span> + distance.<span class="hljs-property">x</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        tools.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = tools.<span class="hljs-property">offsetTop</span> + distance.<span class="hljs-property">y</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 保存本次鼠标位置</span></span><br><span class="language-javascript">        start.<span class="hljs-property">x</span> = e.<span class="hljs-property">x</span>;</span><br><span class="language-javascript">        start.<span class="hljs-property">y</span> = e.<span class="hljs-property">y</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端AES加密的简单应用</title>
    <link href="/2020/2447b207762d/"/>
    <url>/2020/2447b207762d/</url>
    
    <content type="html"><![CDATA[<p>本文并不会系统地讲AES及其应用，只是遇到案例学习了然后记录一下</p><span id="more"></span><p>再次说明，本文并不是为了系统学习和比较各种加密方式…(我还不会)</p><h2 id="什么是AES"><a href="#什么是AES" class="headerlink" title="什么是AES"></a>什么是AES</h2><p>高级加密标准(AES,Advanced Encryption Standard)为最常见的对称加密算法。对称加密算法也就是<strong>加密和解密用相同的密钥</strong></p><h2 id="如何利用AES"><a href="#如何利用AES" class="headerlink" title="如何利用AES"></a>如何利用AES</h2><p>首先AES这家伙只要你知道密钥就能加密解密的，而前端代码一般是公开的，或者说是破解可能需要一定成本。最终也只是为了数据不要明文存着让人一眼看出这个样子罢了。遇到了两个例子，分享一下。</p><h3 id="数据传输加密"><a href="#数据传输加密" class="headerlink" title="数据传输加密"></a>数据传输加密</h3><blockquote><p>背景：遇上了某qt应用，学校用其发布活动，但各种功能极其不人性化，于是想通过前端代码找到接口做个定时器抓取数据，过程中遇到一些小困难(知识点)。</p></blockquote><p>如题，前端后端交互的时候数据会被丢来丢去。要是中途被人截胡，明文的话可能会导致某些数据的泄露，加个密就能让数据难看一点。</p><h4 id="固定密钥"><a href="#固定密钥" class="headerlink" title="固定密钥"></a>固定密钥</h4><p>固定密钥就是前后端约定好一个密钥，然后写死在代码里面就完事。我用密钥<code>“123456”</code>加密，你用<code>“123456”</code>解密，你说这好吗？</p><h4 id="变化密钥"><a href="#变化密钥" class="headerlink" title="变化密钥"></a>变化密钥</h4><p>比固定密钥高大上一点点…就是密钥能通过逻辑生成，每次不是同一个</p><p>但是是同一套逻辑，花点时间搞懂就也就能生成密钥了（不然哪里来的本文</p><p>密钥是变化的，那么前后端如何都知道密钥是什么呢？</p><blockquote><p> 张三：这个我知道！把密钥放在请求里送给后端</p><p>我：那密钥明文放在请求里我加密有什么用？</p><p>李四：那就把密钥放在密文里</p><p>我：？？？后端不知道密钥，看着密文拿头去解密是吧</p><p>张三李四：有道理，那怎么办？</p><p>我：整点看起来比较正常而且经常变化的<strong>数据</strong>去生成密钥不就得了，然后同时把<strong>数据</strong>发给后端</p></blockquote><p>以上提到的一个数据实例便是：<strong>时间戳</strong></p><p>时间戳这种看起来普普通通的东西 &#x3D;&gt; 好东西</p><p><strong>前端利用时间戳生成密钥并对数据进行加密，再把时间戳附带在请求头里</strong></p><p><strong>后端接收到数据密文的时候，提取请求头的时间戳生成密钥，再去解密</strong></p><p>如果直接就用时间戳当密钥的话，那真的是不太行噢。那我们就对时间戳做些简单处理，要是有人拿时间戳去碰碰，也能让他碰一脸灰！</p><hr><p><strong>下面就是案例具体代码，仅提供思路，不能直接跑。敏感部分已去掉</strong></p><p>涉及到的js库有：<a href="https://github.com/emn178/js-md5">js-md5</a>、<a href="https://github.com/brix/crypto-js">crypto-js</a></p><p><strong>时间戳混淆&#x2F;获取密钥</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">u</span>(<span class="hljs-params">t</span>) &#123;<br>  <span class="hljs-keyword">var</span> e = <span class="hljs-title function_">kmd5</span>(<span class="hljs-string">&quot;5%^&amp;#@*321!`~,;:&quot;</span> + t + <span class="hljs-string">&quot;TT_APP000000&#x27;;-=&quot;</span>),<span class="hljs-comment">//加长版时间戳利用md5生成固定长度字符串</span><br>      n = <span class="hljs-built_in">parseInt</span>(t / <span class="hljs-number">1e3</span>);<br>  e = e.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-comment">// 再做处理，为了生成密钥</span><br>  <span class="hljs-keyword">let</span> i = (e = n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? e.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">t, e</span>) &#123;<br>      <span class="hljs-keyword">return</span> e % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>  &#125;) : e.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">t, e</span>) &#123;<br>      <span class="hljs-keyword">return</span> e % <span class="hljs-number">2</span> != <span class="hljs-number">0</span><br>  &#125;)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>参数加密</strong></p><p>参数t为字符串类型，请用<code>JSON.stringify</code>处理相关类型的数据，e为请求头中的时间戳</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">encryptHttp</span>(<span class="hljs-params">t, e</span>) &#123;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-title function_">u</span>(e),<br>  i = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(t);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(i, n, &#123;<br>      <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span><br>  &#125;).<span class="hljs-title function_">toString</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>加密后还需做相关处理（视具体情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> miwen = <span class="hljs-title function_">encryptHttp</span>(data,time)<br>miwen = <span class="hljs-built_in">encodeURI</span>(miwen);<br>miwen = miwen.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;%2B&quot;</span>);<br><br><span class="hljs-comment">// 最后把密文放进参数里</span><br>&#123;<br>    <span class="hljs-attr">params</span>:miwen<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>响应解密</strong></p><p>参数t为响应的密文，e为请求头中的时间戳</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">decryptHttp</span>(<span class="hljs-params">t, e</span>) &#123;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-title function_">u</span>(e);<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(t, n, &#123;<br>      <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">ECB</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">stringify</span>(i).<span class="hljs-title function_">toString</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据持久化加密"><a href="#数据持久化加密" class="headerlink" title="数据持久化加密"></a>数据持久化加密</h3><p>数据持久化保存到浏览器<code>storage</code>里，明文保存可能也不太好。那就加个密再丢进去吧！</p><h4 id="固定密钥-1"><a href="#固定密钥-1" class="headerlink" title="固定密钥"></a>固定密钥</h4><p>一般也就用这个办法了。比如说<code>Vuex持久化</code>，在刷新前保存数据，刷新后读取数据。</p><h4 id="变化密钥-1"><a href="#变化密钥-1" class="headerlink" title="变化密钥"></a>变化密钥</h4><p>没仔细想过，要实现的话估计也就是上面那个思路，找些普普通通的当变化源</p><hr><p>下面是<code>Vuex持久化</code>一个案例，仅提供思路，不保证能使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 不使用持久化插件：插件每次操作vuex都会触发storage保存，vuex操作比较多的时候有一定影响且插件保存数据为明文信息</span><br><span class="hljs-comment">// 页面加载时读取缓存数据到vuex</span><br><span class="hljs-keyword">if</span> (sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;miwen&quot;</span>)) &#123;<br>  <span class="hljs-comment">// 取缓存中经过加密的密文</span><br>  <span class="hljs-keyword">const</span> saveData = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;miwen&quot;</span>), <span class="hljs-string">&quot;123456&quot;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>));<br>  <span class="hljs-comment">// 数据导入到vuex</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">replaceState</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>, saveData));<br>&#125;<br><br><span class="hljs-comment">// 在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;beforeunload&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 选择需要保存的数据</span><br>  <span class="hljs-keyword">const</span> saveKeys = [<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>];<br>  <span class="hljs-keyword">const</span> saveData = &#123;&#125;;<br>  <span class="hljs-keyword">const</span> state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>;<br>  saveKeys.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    saveData[key] = state[key];<br>  &#125;);<br>  <span class="hljs-comment">// 取需要保存的数据并进行AES加密</span><br>  <span class="hljs-keyword">const</span> ciphertext = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(saveData), <span class="hljs-string">&quot;123456&quot;</span>).<span class="hljs-title function_">toString</span>();<br>  sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;miwen&quot;</span>, ciphertext);<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS实现打字机效果</title>
    <link href="/2020/c98cd32c8840/"/>
    <url>/2020/c98cd32c8840/</url>
    
    <content type="html"><![CDATA[<p>看到了一些Hexo博客首页用到了打字机效果。于是思考不使用Javascript，如何实现打字机效果呢？</p><span id="more"></span><p><img src="https://img.chanx.tech/i/2022/06/12/6oau0_0.gif"></p><p>一个字总结：<strong>丑</strong>。</p><p><strong>实现：利用css中<code>animiation</code>实现关键帧组成循环动画。<code>width</code>减少模仿字体被删除；<code>border-right</code>黑白变色模仿光标闪烁</strong></p><p>直接上源码：</p><figure class="highlight html"><figcaption><span>，，，，，</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#demo</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">white-space</span>: nowrap;</span><br><span class="language-css">      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Courier New&#x27;</span>, Courier, monospace;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;</span><br><span class="language-css">      <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      <span class="hljs-attribute">animation</span>: first <span class="hljs-number">6s</span> step-end infinite;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: inline-block</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#key</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">200px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-keyword">@keyframes</span> first &#123;</span><br><span class="language-css">      <span class="hljs-number">0%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">5%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">10%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">20%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">25%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">30%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">40%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">45%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">50%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">60%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">80%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid black;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-number">100%</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid white;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span>THIS DEMO<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>奇奇怪怪的Javascript</title>
    <link href="/2020/d19ede1c65b8/"/>
    <url>/2020/d19ede1c65b8/</url>
    
    <content type="html"><![CDATA[<p>Javascript是最好的语言(滑稽.jpg</p><h2 id="浮点数精度"><a href="#浮点数精度" class="headerlink" title="浮点数精度"></a>浮点数精度</h2><h2 id="navigator-onLine真的可以实现断网检测吗？"><a href="#navigator-onLine真的可以实现断网检测吗？" class="headerlink" title="navigator.onLine真的可以实现断网检测吗？"></a><code>navigator.onLine</code>真的可以实现断网检测吗？</h2><p>摘录自红宝书：浏览器会跟踪网络连接状态并以两种方式暴露这些信息：<strong>连接事件和<code>navigator.onLine</code>属性</strong>。在设备连接导网络时，浏览器会记录这个事实并在<code>window</code>对象上触发<code>online</code>事件。相应地，断开网络连接后，浏览器会在<code>window</code>对象上触发<code>offline</code>事件。任何时候，都可以通过<code>navigator.onLine</code>属性来确定浏览器的联网状态。这个属性返回一个布尔值，表示浏览器是否联网。</p><blockquote><p>哦吼！那我们直接利用他们不就达到想要的效果了吗？</p></blockquote><p>红宝书后面补充了这么一句话：<strong>到底怎么才算联网取决于浏览器与系统实现。有些浏览器可能会认为只要连接到局域网就算”在线”，而不管是否真正接入了互联网</strong>。</p><blockquote><p>这么说来，这玩意还是不靠谱。看浏览器具体实现，那我还不如拿头去给你断网检测。回到重点，我对谷歌和火狐进行了同样的尝试，发现两者表现一致。能在网线拔掉和插入的时候触发相应事件，但我没有对有线连接局域网这一方式进行尝试。另外我发现在无线网络的条件下，断开连接网络貌似不会触发事件，真的是越来越奇怪了</p></blockquote><blockquote><p>由于websocket断网时有超时断开，所以最后我断网检测利用的是ws中open和close事件实现，其中websocket有实现心跳机制</p></blockquote><h2 id="时间戳真的是准确的吗？"><a href="#时间戳真的是准确的吗？" class="headerlink" title="时间戳真的是准确的吗？"></a>时间戳真的是准确的吗？</h2><p>利用<code>new Date().getTime()</code>去获取一个最新的时间戳，<strong>实际上它跟系统的时间设置有关</strong>。假设用户的时间并不准确，对于一些基于时间戳的逻辑操作而言，是存在非常大的隐患的。<strong>举例来说</strong>，一个用时间戳判定实现的倒计时器，是可以通过修改系统时间来实现延长时间的这么一个功能；基于时间戳实现的节流操作，会出现时间戳的差为负数的情况，导致节流失效并烂掉</p><p>那么，我们修改了系统时间，他就会立刻反应到浏览器上的吗？</p><p>经过我的尝试，谷歌浏览器应该是在系统到达新的一分钟的时候会更新到浏览器上（简单尝试，不保证如此</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你可能需要Windows Terminal</title>
    <link href="/WindowsTerminal/"/>
    <url>/WindowsTerminal/</url>
    
    <content type="html"><![CDATA[<p>一款新的windows终端程序</p><span id="more"></span><p>不说废话，先上图</p><p><img src="https://img.chanx.tech/i/2022/06/12/8jfb5_0.png" alt="image-20201027195830982"></p><p><img src="https://img.chanx.tech/i/2022/06/12/8k1vk_0.png" alt="image-20201027195415759"></p><p>经常使用vscode跑服务，终端不想看的时候需要进行拖拉，不然遮挡代码</p><p>直接打开cmd跑吧，多窗口不好管理</p><p><strong>那就用Windows Terminal！Ohhhhhhhhhhhhhhhh</strong></p><h2 id="Windows-Terminal作为主要命令行工具"><a href="#Windows-Terminal作为主要命令行工具" class="headerlink" title="Windows Terminal作为主要命令行工具"></a>Windows Terminal作为主要命令行工具</h2><p>首先从微软商店下载好，并确认可以使用</p><p><a href="https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab#">https://www.microsoft.com/zh-cn/p/windows-terminal-preview/9n0dx20hk701?activetab=pivot:overviewtab#</a></p><h3 id="右键打开Terminal"><a href="#右键打开Terminal" class="headerlink" title="右键打开Terminal"></a>右键打开Terminal</h3><p>你可能还想更方便地打开，如</p><img src="https://img.chanx.tech/i/2022/06/12/8ksri_0.png" alt="image-20201027200001700" style="zoom: 50%;" /><ul><li><p><code>win + R</code>打开运行窗口，输入<code>regedit</code></p></li><li><p>打开<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></p></li><li><p>右键新建项命名为<code>wt</code>，修改默认值为你想要的名字如<code>在此打开 Terminal</code></p></li><li><p>如有需要的话可以将这个命令置顶，则添加新字符串值<code>Position</code>，值为<code>Top</code></p></li><li><p>新建一个项<code>command</code>，默认值<code>%USERPROFILE%\AppData\Local\Microsoft\WindowsApps\wt.exe</code></p><p>注意：如失效，可尝试将%USERPROFILE%改为指定用户目录如<code>C:\Users\&lt;username&gt;</code>，并重启，<code>&lt;username&gt;</code>记得改成自己的用户名</p></li></ul><p>一般出现<code>explorer.exe</code>错误多是没有用管理员权限写入导致的</p><h3 id="在当前目录打开"><a href="#在当前目录打开" class="headerlink" title="在当前目录打开"></a>在当前目录打开</h3><p>添加一行配置<code>&quot;startingDirectory&quot;: null,</code></p><p>目的是从目录右键打开时终端路径在你当前的目录下</p><p><img src="https://img.chanx.tech/i/2022/06/12/8ly7m_0.png" alt="image-20201031111710347"></p><p><img src="https://img.chanx.tech/i/2022/06/12/8mjgl_0.png" alt="image-20201031111732159"></p><p>其他配置文件可以查看<a href="https://aka.ms/terminal-profile-settings">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>vue多页面应用配置</title>
    <link href="/vue-pages/"/>
    <url>/vue-pages/</url>
    
    <content type="html"><![CDATA[<p>首先搭建一个脚手架项目，<code>vuecli4 + vue2默认配置 + router + vuex</code>。此时得到一个原始的<strong>vue单页面应用</strong>项目，去掉组件。</p><h2 id="多页面应用结构"><a href="#多页面应用结构" class="headerlink" title="多页面应用结构"></a>多页面应用结构</h2><h3 id="了解单页面"><a href="#了解单页面" class="headerlink" title="了解单页面"></a>了解单页面</h3><p>在项目根目录下新建<code>vue.config.js</code>文件，我们先看看默认配置了解一下单页应用</p><p><img src="https://img.chanx.tech/i/2022/06/12/aghmr_0.png" alt="image-20201027173459149"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 页面入口</span><br>  <span class="hljs-attr">pages</span>:&#123;<br>    <span class="hljs-attr">index</span>: &#123;<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;src/main.js&quot;</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;标题&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//关闭自动打开浏览器</span><br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>此时打包后的<code>index.html</code>会使用<code>main.js</code>作为入口，可以理解为初始化的执行文件</p><p>当然，我们不想让他叫<code>index.html</code>，给他换个名字是吧，比如<code>demo.html</code></p><p>我们修改一下页面对象的名字，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 页面入口</span><br>  <span class="hljs-attr">pages</span>:&#123;<br>    <span class="hljs-attr">demo</span>: &#123;<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;src/main.js&quot;</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;标题&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//关闭自动打开浏览器</span><br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>此时打包后的页面文件为<code>demo.html</code>，它会使用<code>main.js</code>作为入口</p><p>当然，我们可能还要加入<strong>模板页面</strong>，打包的时候以它为模板</p><p>我们在根目录新建一个HTML文件，就叫<code>template.html</code>吧</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">utf-8</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">viewport</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>        &lt;%= htmlWebpackPlugin.options.title %&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">app</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;%= htmlWebpackPlugin.options.title %&gt;</code>对应的是页面对象的<code>title</code>属性，当然还有其他一些属性</p><p>此时，<code>vue.config.js</code>需要修改一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">productionSourceMap</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// 页面入口</span><br>  <span class="hljs-attr">pages</span>:&#123;<br>    <span class="hljs-attr">index</span>: &#123;<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;src/main.js&quot;</span>,<br>      <span class="hljs-comment">// 模板文件</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;template.html&quot;</span>,<br>      <span class="hljs-comment">// 在 dist/index.html 的输出</span><br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.html&quot;</span>,<br>      <span class="hljs-comment">// 当使用 title 选项时，</span><br>      <span class="hljs-comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;标题&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//关闭自动打开浏览器</span><br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>此时打包后会输出<code>index.html</code>文件</p><blockquote><p>问题来了，修改页面对象的名字跟页面对象中的filename属性有什么关系呢？</p><p>我认为在filename为空的情况下，打包时会使用页面对象的名字</p><p>总的来说，就是filename属性优先</p></blockquote><p>这么一来，<code>vue单页面应用</code>的结构好像摸得差不多了</p><p><strong>访问HTML文件，然后通过入口JS文件进行初始化（如实例化Vue），把<code>App.vue</code>挂到网页上</strong></p><h3 id="基于单页面改造多页面"><a href="#基于单页面改造多页面" class="headerlink" title="基于单页面改造多页面"></a>基于单页面改造多页面</h3><p>基于单页面应用，如何改造成多页面应用？</p><p>上面我们知道，一个<code>Vue单页面应用</code>入口由三部分组成：网页模板<code>.html</code>、入口文件<code>.js</code>、Vue页面<code>.vue</code></p><blockquote><p>网页模板不是必须提供的，但打包时会生成默认的模板</p></blockquote><p>那么每一个页面都是这样子的咯，我们开始改造？</p><p><img src="https://img.chanx.tech/i/2022/06/12/apwha_0.png" alt="image-20201027181144590"></p><p>根据两个页面对象的<code>filename</code>，我们知道打包后是两个页面文件<code>app1.html</code>和<code>app2.html</code></p><p>那<code>index.html</code>是什么？</p><p><img src="https://img.chanx.tech/i/2022/06/12/cr4xb_0.png" alt="image-20201027181312761"></p><p>可以看到<code>index.html</code>里面并没有逻辑代码，所以纯粹就是输出了一个默认的网页模板</p><p>打开浏览器，看下我们的成果</p><p><img src="https://img.chanx.tech/i/2022/06/12/aqb4q_0.png" alt="image-20201027181619615"></p><p><strong>多页面应用get!!!</strong></p><blockquote><p>多页面应用中各页面是相互独立的, 因为他们各自拥有自己的Vue实例和router实例和vuex实例</p><p>可以说是两个独立的项目</p></blockquote><h3 id="自动生成页面对象"><a href="#自动生成页面对象" class="headerlink" title="自动生成页面对象"></a>自动生成页面对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> glob = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;glob&quot;</span>);<br><span class="hljs-comment">// 获取文件信息 =&gt; 生成pages对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleEntry</span>(<span class="hljs-params">entry</span>) &#123;<br>  <span class="hljs-keyword">const</span> entries = &#123;&#125;;<br>  <span class="hljs-keyword">let</span> entryBaseName = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> entryPathName = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> entryTemplate = <span class="hljs-string">&quot;&quot;</span>;<br><br>  glob.<span class="hljs-title function_">sync</span>(entry).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    entryBaseName = path.<span class="hljs-title function_">basename</span>(item, path.<span class="hljs-title function_">extname</span>(item));<br>    entryTemplate = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">splice</span>(-<span class="hljs-number">3</span>);<br>    entryPathName = entryBaseName;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * entry为pages下页面文件夹名字的js文件，如pages/app1/app1.js</span><br><span class="hljs-comment">     * template为pages下页面文件夹的html文件</span><br><span class="hljs-comment">     */</span><br>    entries[entryPathName] = &#123;<br>      <span class="hljs-attr">entry</span>: <span class="hljs-string">`src/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">0</span>]&#125;</span>/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">1</span>]&#125;</span>/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">1</span>]&#125;</span>.js`</span>,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`src/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">0</span>]&#125;</span>/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">1</span>]&#125;</span>/<span class="hljs-subst">$&#123;entryTemplate[<span class="hljs-number">2</span>]&#125;</span>`</span>,<br>      <span class="hljs-attr">title</span>: entryTemplate[<span class="hljs-number">2</span>],<br>      <span class="hljs-attr">filename</span>: entryTemplate[<span class="hljs-number">2</span>],<br>    &#125;;<br>  &#125;);<br><br>  <span class="hljs-keyword">return</span> entries;<br>&#125;<br><br><span class="hljs-keyword">const</span> pages = <span class="hljs-title function_">handleEntry</span>(<span class="hljs-string">&quot;./src/pages/**?/*.html&quot;</span>); <span class="hljs-comment">// 调用函数扫描pages文件夹</span><br><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>pages,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意: 用此方法生成页面对象时必须保证pages下文件夹与相应入口js文件同名, 如pages&#x2F;app1&#x2F;app1.js</strong></p><h2 id="隐藏html后缀"><a href="#隐藏html后缀" class="headerlink" title="隐藏html后缀"></a>隐藏html后缀</h2><p>然后我们兴奋地打包文件部署到生产环境<code>Nginx</code>上，然后访问</p><p><img src="https://img.chanx.tech/i/2022/06/12/arf0c_0.png" alt="image-20201027183545808"></p><p>一脸问号？？？那我们换个方式….</p><blockquote><p>index.html 是默认网页，在服务器上比如访问’&#x2F;‘时，服务器会指向index.html。故不会发生这种情况</p></blockquote><p><img src="https://img.chanx.tech/i/2022/06/12/as3v1_0.png" alt="image-20201027183640128"></p><p>啊这…每次都要加个html后缀才能访问，甲方会不会炸的？</p><blockquote><p><strong>注意：路由模式为History的请往下看,此方法不适用</strong></p></blockquote><p>我们配置一下<code>nginx</code>让他在没有后缀名的情况下也能找到文件，配置文件为<code>XX.conf</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">location / &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-operator">-f</span> <span class="hljs-variable">$request_filename</span>)&#123;<br>        rewrite (.*)<span class="hljs-variable">$</span> <span class="hljs-variable">$1</span>.html last;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大功告成</p><p><strong>注意: 在隐藏html后缀的情况下,url不允许”.”的出现; 即参数不能出现点, 同时页面跳转无需加后缀<code>&lt;a href=&quot;./app2&quot;&gt;&lt;/a&gt;</code></strong></p><h2 id="路由使用history"><a href="#路由使用history" class="headerlink" title="路由使用history"></a>路由使用history</h2><p>甲方可能又要说了：你这个网址怎么每次都有一个<code>#</code>呀，去掉去掉</p><p>噢！万能的工具人此时应该想到了路由里面的<code>mode: &quot;history&quot;</code></p><p>我们把路由改成<code>history</code>模式，热情高涨地进行开发</p><h3 id="路由跳转路径有误"><a href="#路由跳转路径有误" class="headerlink" title="路由跳转路径有误"></a>路由跳转路径有误</h3><p>尝试切换路由，不对劲 &#x3D;&gt; <code>/app1</code>应该切换到<code>/app1/about</code>的，但实际上是切成<code>/about</code></p><p>好活！路由加个前缀应该就没问题了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;history&quot;</span>,<br>  <span class="hljs-attr">base</span>:<span class="hljs-string">&quot;/app1/&quot;</span>,<br>  routes<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="刷新路由丢失"><a href="#刷新路由丢失" class="headerlink" title="刷新路由丢失"></a>刷新路由丢失</h3><p>开发环境中，路由跳转后刷新页面可能会出现404错误。<strong>因为刷新页面时访问的资源找不到，因为<code>vue-router</code>设置的路径不是真实存在的路径。</strong><code>vue.config.js</code>加入以下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">devServer</span>: &#123;<br>  <span class="hljs-attr">open</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//关闭自动打开浏览器</span><br>  <span class="hljs-attr">historyApiFallback</span>: &#123;<br>    <span class="hljs-attr">verbose</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">rewrites</span>: [<br>      &#123; <span class="hljs-attr">from</span>: <span class="hljs-regexp">/^\/app1\/.*$/</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/app1.html&quot;</span> &#125;,<br>      &#123; <span class="hljs-attr">from</span>: <span class="hljs-regexp">/^\/app2\/.*$/</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">&quot;/app2.html&quot;</span> &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>既然本地开发的服务端要做配置，那么生产环境的<code>nginx</code>服务器也需配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ <span class="hljs-variable">@router</span>;<br>    <span class="hljs-attribute">index</span> index.html;<br>&#125;<br><br><br><span class="hljs-section">location</span> <span class="hljs-variable">@router</span> &#123;<br>    <span class="hljs-comment"># rewrite ^.*$ /index.html  last;</span><br>    <span class="hljs-comment"># 多页面 时刷新配置如下 </span><br>    <span class="hljs-comment"># rewrite ^((?!/(app1|app2)/*).)*$ /index.html last; </span><br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/app1/*</span>  /app1.html  <span class="hljs-literal">last</span>;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/app2/*</span>  /app2.html  <span class="hljs-literal">last</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h2><h3 id="Uncaught-SyntaxError-Unexpected-token"><a href="#Uncaught-SyntaxError-Unexpected-token" class="headerlink" title="Uncaught SyntaxError:Unexpected token"></a>Uncaught SyntaxError:Unexpected token</h3><p><code>vue.config.js</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS重难点梳理</title>
    <link href="/2020/2758254fdd97/"/>
    <url>/2020/2758254fdd97/</url>
    
    <content type="html"><![CDATA[<h2 id="第6章-面向对象的程序设计"><a href="#第6章-面向对象的程序设计" class="headerlink" title="第6章 面向对象的程序设计"></a>第6章 面向对象的程序设计</h2><h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><h4 id="属性类型"><a href="#属性类型" class="headerlink" title="属性类型"></a>属性类型</h4><h4 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h4><h4 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h4><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><h4 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h4><h4 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h4><h4 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h4><h4 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h4><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><h4 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h4><h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><h2 id="第7章-函数表达式"><a href="#第7章-函数表达式" class="headerlink" title="第7章 函数表达式"></a>第7章 函数表达式</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>闭包</strong>：函数中有权访问另一个函数作用域中的变量</p><h4 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFunctions</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>result[i] = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述例子每个函数都引用着保存变量i的同一个变量对象，所以每一个函数内部i的值都是10</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createFunctions</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>result[i] = (<span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> num;<br>            &#125;<br>&#125;)(i);<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中我们没有直接把闭包赋值给数组，二十定义一个匿名函数并立即执行。由于函数参数式<strong>按值传递</strong>的，所以就会将变量i的当前值复制给参数num。而在这个匿名函数内部，又创建并返回了一个访问num的闭包。这样一来，result数组中的每个函数都有自己的num变量的一个副本，因此就可以返回各自不同的数值</p><h4 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br><br><span class="hljs-keyword">var</span> object = &#123;<br>name : <span class="hljs-string">&quot;My Object&quot;</span>,<br><span class="hljs-attr">getNameFunc</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-title function_">alert</span>(object.<span class="hljs-title function_">getNameFunc</span>()());<span class="hljs-comment">//&quot;The Window&quot;(在非严格模式下)</span><br></code></pre></td></tr></table></figure><p>每个函数在被调用的时候，其活动对象都会自动取得两个特殊变量：this和arguments。内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br><br><span class="hljs-keyword">var</span> object = &#123;<br>name : <span class="hljs-string">&quot;My Object&quot;</span>,<br><span class="hljs-attr">getNameFunc</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> _this.<span class="hljs-property">name</span>;<br>&#125;<br>&#125;<br>&#125;;<br><br><span class="hljs-title function_">alert</span>(object.<span class="hljs-title function_">getNameFunc</span>()());<span class="hljs-comment">//&quot;My Object&quot;</span><br></code></pre></td></tr></table></figure><p>另外，在几种特殊情况下，this的值可能会意外地改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br><span class="hljs-keyword">var</span> object = &#123;<br>name : <span class="hljs-string">&quot;My Object&quot;</span>,<br><span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br>&#125;;<br><br><br>object.<span class="hljs-title function_">getName</span>();<span class="hljs-comment">//&quot;My Object&quot;</span><br>(object.<span class="hljs-property">getName</span>)();<span class="hljs-comment">//&quot;My Object&quot;</span><br>(object.<span class="hljs-property">getName</span> = object.<span class="hljs-property">getName</span>)();<span class="hljs-comment">//&quot;The Window&quot;，在非严格模式下</span><br></code></pre></td></tr></table></figure><p>第一和第二行代码其实是一样的，第三行代码先执行赋值语句再调用赋值后的结果。因为这个赋值表达式的值是函数本身，所以this的值得不到维持。常见情况下并不会出现二三两种写法，只是为了更好地说明细微的语法变化可能会导致this的值发生改变。</p><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p><code>IE9</code>之前的版本对<code>JScript</code>对象和<code>COM</code>对象使用不同的垃圾收集例程，因此闭包在IE的这些版本里会导致一些特殊问题。具体来说，如果闭包的作用域链中保存着一个<code>HTML</code>元素，那么就意味着该元素将会无法被销毁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">assignHandler</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;someElement&quot;</span>);<br>element.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(element.<span class="hljs-property">id</span>)<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码创建了一个作为<code>element</code>元素事件处理程序的闭包，而这个闭包则又创建了一个循环引用。由于匿名函数保存了一个对<code>assignHandler()</code>的活动对象的引用，因此就会导致无法减少element的引用数。只要匿名函数存在，<code>element</code>的引用数至少也是1，因此它所占用的内存就永远不会被回收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">assignHandler</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;someElement&quot;</span>);<br>    <span class="hljs-keyword">var</span> id = element.<span class="hljs-property">id</span>;<br>element.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(id)<br>&#125;;<br>    element = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的代码中，通过把<code>element.id</code>的一个副本保存在一个变量中，并且在闭包中引用该变量消除了循环引用。但仅仅做到这一步还是不能解决内存泄漏的问题。必须要记住：<strong>闭包会引用包含函数的整个活动对象</strong>，而其中包含着<code>element</code>。即使闭包不直接引用<code>element</code>，包含函数的活动对象中也仍然会保存一个引用。因此，有必要把<code>element</code>设置为<code>null</code>。这样就能接触对<code>DOM</code>对象的引用，顺利减少其因引用数，确保正常回收其占用的内存。</p><h3 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h3><p>在Javascript中没有块级作用域的概念（ES6中出现了<code>let</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">output</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)&#123;<br>    <span class="hljs-title function_">alert</span>(i);<br>    &#125;<br>    <span class="hljs-title function_">alert</span>(i);<span class="hljs-comment">//&quot;5&quot;</span><br>&#125;)();<br></code></pre></td></tr></table></figure><p>在Java、C++等语言中，变量i只会在for循环的语句中有定义，循环一旦结束，变量i就被销毁。</p><p>可是在Javascript中变量i是定义在<code>output()</code>的活动对象中的，因此从它有定义开始，就可以在函数内部的任意处访问它</p><p><strong>匿名函数可以用来模仿块级作用域（又称私有作用域）并避免这个问题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//这里是块级作用域</span><br>&#125;();<span class="hljs-comment">//出错</span><br></code></pre></td></tr></table></figure><p>Javascript将function关键字当作一个函数声明的开始，而函数声明后面不能跟圆括号。然而，<strong>函数表达式的后面可以跟圆括号</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//这里是块级作用域</span><br>&#125;)();<br></code></pre></td></tr></table></figure><p>无论在什么地方，要临时使用变量就可以使用私有作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">count</span>)&#123;<br>    (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)&#123;<br>    <span class="hljs-title function_">alert</span>(i);<br>    &#125;<br>    &#125;)();<br>    <span class="hljs-title function_">alert</span>(i);<span class="hljs-comment">//导致一个错误</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在for循环的外部插入了一个私有作用域。在匿名函数中定义的任何变量都会在执行结束时被销毁，因此变量i只能在循环中使用。而在私有作用域中能够访问变量count，是因为这个匿名函数是一个闭包，它能够访问包含作用域内的所有变量</p><h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><h4 id="静态私有变量"><a href="#静态私有变量" class="headerlink" title="静态私有变量"></a>静态私有变量</h4><h4 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h4><h4 id="增强的模块模式"><a href="#增强的模块模式" class="headerlink" title="增强的模块模式"></a>增强的模块模式</h4><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3>]]></content>
    
    
    <categories>
      
      <category>笔记note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS原型链那些事</title>
    <link href="/2020/a030ee3fe414/"/>
    <url>/2020/a030ee3fe414/</url>
    
    <content type="html"><![CDATA[<p>在使用JavaScript的时候，可能会经常看见控制台输出信息里有<code>__proto__</code>或者<code>prototype</code>；又或者是你在使用字符串的时候用到一些方法，你会好奇它究竟是写在哪里；又或者是你对JavaScript里面没有类的产生疑惑</p><h2 id="几种函数"><a href="#几种函数" class="headerlink" title="几种函数"></a>几种函数</h2><h3 id="作为普通函数"><a href="#作为普通函数" class="headerlink" title="作为普通函数"></a>作为普通函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-comment">//调用函数</span><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><h3 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h3><p>当一个函数被用来创建新对象的时候，我们会叫他为<code>构造函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//按照惯例，作为构造函数的函数名首字母需要大写</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><br><span class="hljs-comment">//当我们使用new操作符的时候，实际上会进行下面几个步骤</span><br><span class="hljs-comment">//创建一个新的对象</span><br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br><span class="hljs-comment">//原型链连接/对象关联</span><br>obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Foo</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><span class="hljs-comment">//把新对象作为函数的上下文</span><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">apply</span>(obj, <span class="hljs-variable language_">arguments</span>);<br><span class="hljs-comment">//Foo不返回对象，所以返回新对象</span><br><span class="hljs-keyword">return</span> obj;<br></code></pre></td></tr></table></figure><h3 id="作为对象"><a href="#作为对象" class="headerlink" title="作为对象"></a>作为对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;&#125;<br>foo.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;tom&quot;</span>;<br>foo[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>以上这三种使用方式中，以普通函数来调用的方式十分常见，不再赘述。下面要讲的就是当一个函数<strong>被作为构造函数</strong>来使用和<strong>被作为对象</strong>来使用的时候，分别是什么样的，以及它们之间与原型链的关系是什么样的</p><h2 id="proto-和prototype"><a href="#proto-和prototype" class="headerlink" title="__proto__和prototype"></a><code>__proto__</code>和<code>prototype</code></h2><p><strong>对象</strong>有一个特殊的<code>__proto__</code>的内置属性，<strong>其实它就是对其他对象的引用</strong>。几乎所有的对象在创建这个属性的时候都会被赋予一个非空的值。<strong>需要注意的是，这个属性可以为空，虽然少见。</strong>它是实现原型链的关键，因为它会指向构造函数的原型对象，即 prototype 属性上的对象，而构造函数原型对象上的<code>__proto__</code> 又指向上一级，即：<code>构造函数.prototype.__proto__ === 上一级构造函数.prototype</code>，以此类推层层往上，就形成了我们所说的原型链。</p><p><code>prototype</code>是<strong>函数</strong>特有的一个属性，它是构造函数的原型对象。JavaScript 是一种基于原型的语言，每个对象都拥有一个原型对象，对象以其原型为模板，从原型继承方法和属性。</p><p>先来看看下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>a = <span class="hljs-number">2</span>;<br>&#125;;<br>obj.<span class="hljs-property">a</span>;<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>相信大家都能一下子把结果说出来，结果是2</p><p>我们再来看看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> anotherObj = &#123;<br>a = <span class="hljs-number">2</span>;<br>&#125;;<br><span class="hljs-comment">//创建一个关联到anotherObj的对象</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(anotherObj);<br>obj.<span class="hljs-property">a</span>;<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>显然，此时<code>obj</code>上并没有<code>a</code>属性，那么这个值是哪里来的？这就是我们即将要说的<strong>原型链</strong></p><p>当你试图引用对象的属性时会触发<code>get</code>操作：</p><ol><li>对于默认的<code>get</code>操作，第一步是检查对象本身是否有这个属性，如果有的话就直接使用。</li><li>但是如果<code>a</code>属性不在对象本身，就会继续访问原型链（<code>???.__proto__</code>）找到这个属性直至跑完整条原型链</li></ol><p><strong>哪里是原型链的尽头</strong></p><p>由于所有普通（内置）对象都源于<code>Object.prototype</code>，所以他们的原型链最终都会指向<code>Object.prototype</code>。而<code>Object.prototype.__proto__</code>为<code>null</code>，这不就断了吗。</p><h2 id="函数和对象"><a href="#函数和对象" class="headerlink" title="函数和对象"></a>函数和对象</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>首先我们要知道下面几个关系</p><ol><li>所有的原型对象都是由<code>Object</code>创建出来的</li><li>所有函数对象都是由<code>Function</code>创建出来的。Function是一个构造函数，通过new调用可以生成函数对象，即我们一般自定义的那种函数。所以<code>Fucntion</code>这个构造函数的<code>prototype</code>是所有函数的<code>__proto__</code></li></ol><p>另外，<code>__proto__</code>是对象的属性；<code>prototype</code>是函数的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br></code></pre></td></tr></table></figure><p>分析以上两行代码：</p><ol><li>看到<code>Function.prototype</code>，说明此时<code>Function</code>是当成构造函数来使用的。前面说过构造函数都由<code>Object</code>创建出来的</li><li>看到<code>Object.__proto__</code>，说明此时<code>Object</code>是被当前对象来使用的，前面说过函数对象都是由<code>Function</code>创建出来的</li></ol><h3 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h3><p>Object和Function既是对象，又是函数，两者内部同时含有<code>__proto__</code>和<code>prototype</code>属性，他们关系较为复杂，以下做归纳。</p><blockquote><p>Function.prototype指向”内置函数“。而Object.prototype指向”根源对象“</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">//true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span><span class="hljs-comment">//true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> <span class="hljs-comment">// true</span><br><span class="hljs-comment">//因此</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">//true</span><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p><img src="https://img.chanx.tech/i/2022/06/12/aa0xz_0.png" alt="image-20200922205901071"></p><h3 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h3><p><img src="https://img.chanx.tech/i/2022/06/12/aa9xs_0.png" alt="proto"></p><ol><li><p>函数<code>prototype</code>属性指向原型对象</p></li><li><p>所有的原型对象都是由<code>Object</code>创建出来的</p><ul><li><code>Foo.prototype.__proto__ === Object.prototype</code></li><li><code>Function.prototype.__proto__ === Object.prototype</code></li></ul></li><li><p>所有函数对象都是由<code>Function</code>创建出来的</p><ul><li><code>Foo.__proto__ === Function.prototype</code></li><li><code>Function.__proto__ === Function.prototype</code></li><li><code>Object.__proto__ === Function.prototype</code></li></ul></li><li><p>普通对象指向构造函数的原型</p><ul><li><code>Obj.__proto__ === Foo.prototype</code></li></ul></li></ol><p>::: right</p><p>部分内容参考自<a href="https://blog.csdn.net/qq_36470086/article/details/82599604">不要做切图仔</a>、<a href="https://blog.csdn.net/dingpanqing3307/article/details/101261244?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">dingpanqing3307</a>、<a href="http://blod.wxinxianyun.com/views/category1/2019/091205.html#%E8%A7%A3%E5%86%B3%E9%A2%84%E7%95%99%E9%97%AE%E9%A2%98">山水有轻音</a></p><p>:::</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Cron表达式</title>
    <link href="/cron/"/>
    <url>/cron/</url>
    
    <content type="html"><![CDATA[<h3 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h3><p>Cron 表达式有七个必需字段，按空格分隔。</p><table><thead><tr><th align="left">第一位</th><th align="left">第二位</th><th align="left">第三位</th><th align="left">第四位</th><th align="left">第五位</th><th align="left">第六位</th><th align="left">第七位</th></tr></thead><tbody><tr><td align="left">秒</td><td align="left">分钟</td><td align="left">小时</td><td align="left">日</td><td align="left">月</td><td align="left">星期</td><td align="left">年</td></tr></tbody></table><p>其中，每个字段都有相应的取值范围：</p><table><thead><tr><th align="left">字段</th><th align="left">值</th><th align="left">通配符</th></tr></thead><tbody><tr><td align="left">秒</td><td align="left">0-59 的整数</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">分钟</td><td align="left">0-59 的整数</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">小时</td><td align="left">0-23 的整数</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">日</td><td align="left">1-31 的整数（需要考虑月的天数）</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">月</td><td align="left">1-12 的整数 或 JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">星期</td><td align="left">0-6 的整数 或 MON,TUE,WED,THU,FRI,SAT,SUN；其中 0 指星期一，1 指星期二，依次类推</td><td align="left">, - * &#x2F;</td></tr><tr><td align="left">年</td><td align="left">1970~2099 的整数</td><td align="left">, - * &#x2F;</td></tr></tbody></table><p><strong>通配符</strong></p><table><thead><tr><th align="left">通配符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">, (逗号)</td><td align="left">代表取用逗号隔开的字符的并集。例如：在“小时”字段中 1,2,3 表示1点、2点和3点</td></tr><tr><td align="left">- (破折号)</td><td align="left">包含指定范围的所有值。例如：在“日”字段中，1-15 包含指定月份的 1 号到 15 号</td></tr><tr><td align="left">* (星号)</td><td align="left">表示所有值。在“小时”字段中，* 表示每个小时</td></tr><tr><td align="left">&#x2F; (正斜杠)</td><td align="left">指定增量。在“分钟”字段中，输入 1&#x2F;10 以指定从第一分钟开始的每隔十分钟重复。例如，第 11 分钟、第 21 分钟和第 31 分钟，依此类推</td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li>在 Cron 表达式中的“日”和“星期”字段同时指定值时，两者为“或”关系，即两者的条件分别均生效。</li></ul><p><strong>示例</strong></p><p>下面展示了一些 Cron 表达式和相关含义的示例：</p><ul><li><code>*/5 * * * * * *</code> 表示每5秒触发一次</li><li><code>0 0 2 1 * * *</code> 表示在每月的1日的凌晨2点触发</li><li><code>0 15 10 * * MON-FRI *</code> 表示在周一到周五每天上午10:15触发</li><li><code>0 0 10,14,16 * * * *</code> 表示在每天上午10点，下午2点，4点触发</li><li><code>0 */30 9-17 * * * *</code> 表示在每天上午9点到下午5点内每半小时触发</li><li><code>0 0 12 * * WED *</code> 表示在每个星期三中午12点触发</li></ul><p>::: tip<br>内容来自<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html">微信开放文档</a><br>:::</p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AceEditor开发的坑</title>
    <link href="/2020/5a731ae5d023/"/>
    <url>/2020/5a731ae5d023/</url>
    
    <content type="html"><![CDATA[<h2 id="禁止首行编辑"><a href="#禁止首行编辑" class="headerlink" title="禁止首行编辑"></a>禁止首行编辑</h2><p>使用到ace实现一个首行禁止编辑的功能，我们知道编辑操作可以这些：插入、删除、粘贴。只要阻止第一行的相关操作就可以了</p><p>但是，中文输入法输入会导致一些奇奇怪怪的问题。<strong>所以我们另外对光标进行处理，只要光标点击第一行我们就给他跳转到第二行</strong></p><p>show me the code…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">//光标跳转</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-title function_">getSession</span>().<span class="hljs-property">selection</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;changeCursor&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-title function_">getSelectionRange</span>().<span class="hljs-property">start</span>.<span class="hljs-property">row</span> == <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-title function_">getSelectionRange</span>().<span class="hljs-property">end</span>.<span class="hljs-property">row</span> == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-title function_">gotoLine</span>(<span class="hljs-number">2</span>);<br>  &#125;<br>&#125;);<br><span class="hljs-comment">//不能对第一行进行粘贴、删除操作</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-property">commands</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> hasFirst = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ace</span>.<span class="hljs-title function_">getSelectionRange</span>().<span class="hljs-property">start</span>.<span class="hljs-property">row</span> == <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">const</span> command = e.<span class="hljs-property">command</span>.<span class="hljs-property">description</span>;<br>    <span class="hljs-keyword">if</span> ((hasFirst &amp;&amp; ( command == <span class="hljs-string">&quot;Paste&quot;</span> || command == <span class="hljs-string">&quot;Backspace&quot;</span>))) &#123;<br>      e.<span class="hljs-title function_">preventDefault</span>()<br>      e.<span class="hljs-title function_">stopPropagation</span>()<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上方法能解决大部分问题，但是<strong>移动文本能成功修改</strong>（2020-11-21）</p><p>下面是<code>stackoverflow</code>上面的一个相对来说比较完美解决办法（<a href="https://stackoverflow.com/questions/39640328/how-to-make-multiple-chunk-of-lines-readonly-in-ace-editor/39640987#39640987">传送门</a>）</p><p>重点代码是对原有编辑器方法的拦截修改</p><p>我进行了一些修改和注释：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Ace Editor 锁定或只读行封装</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> CHANX 2020-11-21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">ace</span>&#125; editor ace编辑器实例</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; [readOnlyLines = []] 需要锁定的行号</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setReadOnly</span>(<span class="hljs-params">editor, readOnlyLines</span>) &#123;<br>  <span class="hljs-keyword">const</span> session = editor.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Range</span> = editor;<br>  <span class="hljs-keyword">const</span> readOnlyRanges = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyLines.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">const</span> newRange = [readOnlyLines[i] - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, readOnlyLines[i], <span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// 此处原有代码range是当前行头到下一行头，我修改为当前行头到当前行1000位置</span><br>    <span class="hljs-comment">// 防止下一行头无法被编辑</span><br>    readOnlyRanges.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">start</span>: &#123;<br>        <span class="hljs-attr">row</span>: readOnlyLines[i] - <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">column</span>: <span class="hljs-number">0</span>,<br>      &#125;,<br>      <span class="hljs-attr">end</span>: &#123;<br>        <span class="hljs-attr">row</span>: readOnlyLines[i] - <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">column</span>: <span class="hljs-number">1000</span>,<br>      &#125;,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">before</span>(<span class="hljs-params">obj, method, wrapper</span>) &#123;<br>    <span class="hljs-keyword">const</span> orig = obj[method];<br>    obj[method] = <span class="hljs-keyword">function</span> (<span class="hljs-params">...arg</span>) &#123;<br>      <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(arg);<br>      <span class="hljs-keyword">return</span> wrapper.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-function">() =&gt;</span> orig.<span class="hljs-title function_">apply</span>(obj, args), args);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> obj[method];<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当前选中范围和传入范围是否冲突</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">range</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">intersects</span>(<span class="hljs-params">range</span>) &#123;<br>    <span class="hljs-keyword">return</span> editor.<span class="hljs-title function_">getSelectionRange</span>().<span class="hljs-title function_">intersects</span>(range);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">preventReadonly</span>(<span class="hljs-params">next, args</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyRanges.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">if</span> (<span class="hljs-title function_">intersects</span>(readOnlyRanges[i])) <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 当前选中范围和不可编辑行范围是否冲突</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">newRange</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">intersectsRange</span>(<span class="hljs-params">newRange</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyRanges.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">if</span> (newRange.<span class="hljs-title function_">intersects</span>(readOnlyRanges[i])) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否在不可编辑行的末尾</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">position</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">onEnd</span>(<span class="hljs-params">position</span>) &#123;<br>    <span class="hljs-keyword">const</span> row = position.<span class="hljs-property">row</span>;<br>    <span class="hljs-keyword">const</span> column = position.<span class="hljs-property">column</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyRanges.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">if</span> (readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">row</span> === row &amp;&amp; readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">column</span> === column) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否在不可编辑行的范围外</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">position</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">outSideRange</span>(<span class="hljs-params">position</span>) &#123;<br>    <span class="hljs-keyword">const</span> row = position.<span class="hljs-property">row</span>;<br>    <span class="hljs-keyword">const</span> column = position.<span class="hljs-property">column</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyRanges.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (readOnlyRanges[i].<span class="hljs-property">start</span>.<span class="hljs-property">row</span> &lt; row &amp;&amp; readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">row</span> &gt; row) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>      <span class="hljs-keyword">if</span> (readOnlyRanges[i].<span class="hljs-property">start</span>.<span class="hljs-property">row</span> === row &amp;&amp; readOnlyRanges[i].<span class="hljs-property">start</span>.<span class="hljs-property">column</span> &lt; column) &#123;<br>        <span class="hljs-keyword">if</span> (readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">row</span> !== row || readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">column</span> &gt; column) &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">row</span> === row &amp;&amp; readOnlyRanges[i].<span class="hljs-property">end</span>.<span class="hljs-property">column</span> &gt; column) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  editor.<span class="hljs-property">keyBinding</span>.<span class="hljs-title function_">addKeyboardHandler</span>(&#123;<br>    <span class="hljs-title function_">handleKeyboard</span>(<span class="hljs-params">data, hash, keyString, keyCode, event</span>) &#123;<br>      <span class="hljs-comment">// 阻止不可编辑行行尾的回车</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(keyCode) === <span class="hljs-number">13</span> &amp;&amp; <span class="hljs-title function_">onEnd</span>(editor.<span class="hljs-title function_">getCursorPosition</span>())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (hash === -<span class="hljs-number">1</span> || (keyCode &lt;= <span class="hljs-number">40</span> &amp;&amp; keyCode &gt;= <span class="hljs-number">37</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; readOnlyRanges.<span class="hljs-property">length</span>; i += <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">intersects</span>(readOnlyRanges[i])) &#123;<br>          <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">command</span>: <span class="hljs-string">&quot;null&quot;</span>, <span class="hljs-attr">passEvent</span>: <span class="hljs-literal">false</span> &#125;;<br>        &#125;<br>      &#125;<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-title function_">before</span>(editor, <span class="hljs-string">&quot;onPaste&quot;</span>, preventReadonly);<br>  <span class="hljs-title function_">before</span>(editor, <span class="hljs-string">&quot;onCut&quot;</span>, preventReadonly);<br><br>  <span class="hljs-keyword">const</span> old$tryReplace = editor.<span class="hljs-property">$tryReplace</span>;<br>  editor.<span class="hljs-property">$tryReplace</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">range, replacement</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">intersectsRange</span>(range) ? <span class="hljs-literal">null</span> : old$tryReplace.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重写insert方法： 若postion在不可编辑范围内则不可插入</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> oldInsert = session.<span class="hljs-property">insert</span>;<br>  session.<span class="hljs-property">insert</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">position, text</span>) &#123;<br>    <span class="hljs-keyword">return</span> oldInsert.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, [position, <span class="hljs-title function_">outSideRange</span>(position) ? text : <span class="hljs-string">&quot;&quot;</span>]);<br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重写remove方法： 若range在不可编辑范围内则不可以删除</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> oldRemove = session.<span class="hljs-property">remove</span>;<br>  session.<span class="hljs-property">remove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">range</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">intersectsRange</span>(range) ? <span class="hljs-literal">false</span> : oldRemove.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 重写moveText方法： 若toPosition在不可编辑范围内则可不以移动</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">const</span> oldMoveText = session.<span class="hljs-property">moveText</span>;<br>  session.<span class="hljs-property">moveText</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fromRange, toPosition, copy</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">intersectsRange</span>(fromRange) || !<span class="hljs-title function_">outSideRange</span>(toPosition)) <span class="hljs-keyword">return</span> fromRange;<br>    <span class="hljs-keyword">return</span> oldMoveText.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> setReadOnly;<br><br></code></pre></td></tr></table></figure><h2 id="初始内容可被撤销-x2F-重置撤销栈"><a href="#初始内容可被撤销-x2F-重置撤销栈" class="headerlink" title="初始内容可被撤销&#x2F;重置撤销栈"></a>初始内容可被撤销&#x2F;重置撤销栈</h2><p>每次ace初始化完毕并赋值初始内容后，此时ctrl+z会发生内容消失的情况。因为赋值初始内容其实是一次输入（空 &#x3D;&gt; 初始内容），此时撤销栈会压栈。</p><p>解决办法就是，在初始内容赋值完成后立即重置撤销栈。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">//初始内容</span><br>editor.<span class="hljs-title function_">setValue</span>(<span class="hljs-string">&quot;And now how can I reset the\nundo stack,-1&quot;</span>);<br><span class="hljs-comment">//重置撤销栈UndoManager是保持所有历史的</span><br>editor.<span class="hljs-title function_">getSession</span>().<span class="hljs-title function_">setUndoManager</span>(<span class="hljs-keyword">new</span> ace.<span class="hljs-title class_">UndoManager</span>())<br></code></pre></td></tr></table></figure><h2 id="ace添加自定义主题"><a href="#ace添加自定义主题" class="headerlink" title="ace添加自定义主题"></a>ace添加自定义主题</h2><h3 id="1-编辑样式代码"><a href="#1-编辑样式代码" class="headerlink" title="1. 编辑样式代码"></a>1. 编辑样式代码</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_gutter</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#1e1e1e</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#858585</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_print-margin</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#e8e8e8</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#1e1e1e</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_cursor</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_invisible</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff40</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_constant</span><span class="hljs-selector-class">.ace_buildin</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#569cd6</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_constant</span><span class="hljs-selector-class">.ace_language</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#b4cea8</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_constant</span><span class="hljs-selector-class">.ace_library</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#b5cea8</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_invalid</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: transparent;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3333</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_fold</span> &#123;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_support</span><span class="hljs-selector-class">.ace_function</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_support</span><span class="hljs-selector-class">.ace_constant</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#569cd6</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_support</span><span class="hljs-selector-class">.ace_type</span>,<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_support</span><span class="hljs-selector-class">.ace_class</span> <span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_support</span><span class="hljs-selector-class">.ace_other</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4ec9b0</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_variable</span><span class="hljs-selector-class">.ace_parameter</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_keyword</span><span class="hljs-selector-class">.ace_operator</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_comment</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#608b4e</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_comment</span><span class="hljs-selector-class">.ace_doc</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#608b4e</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_comment</span><span class="hljs-selector-class">.ace_doc</span><span class="hljs-selector-class">.ace_tag</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#608b4e</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_constant</span><span class="hljs-selector-class">.ace_numeric</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#b5cea8</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_variable</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_xml-pe</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">104</span>, <span class="hljs-number">104</span>, <span class="hljs-number">91</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_entity</span><span class="hljs-selector-class">.ace_name</span><span class="hljs-selector-class">.ace_function</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_heading</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#569cd6</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_list</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#dcdcdc</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_selection</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">181</span>, <span class="hljs-number">213</span>, <span class="hljs-number">255</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_step</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">252</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_stack</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">164</span>, <span class="hljs-number">229</span>, <span class="hljs-number">101</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_bracket</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">margin</span>: -<span class="hljs-number">1px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> -<span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">192</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_active-line</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.07</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_gutter-active-line</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0f0f</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_marker-layer</span> <span class="hljs-selector-class">.ace_selected-word</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">250</span>, <span class="hljs-number">250</span>, <span class="hljs-number">255</span>);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">250</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_storage</span>,<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_keyword</span>,<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_meta</span><span class="hljs-selector-class">.ace_tag</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#569cd6</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_string</span><span class="hljs-selector-class">.ace_regex</span> &#123;<br>  <span class="hljs-comment">/**/</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_string</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#d69d85</span>;<br>&#125;<br><span class="hljs-selector-class">.ace-vs-dark</span> <span class="hljs-selector-class">.ace_entity</span><span class="hljs-selector-class">.ace_other</span><span class="hljs-selector-class">.ace_attribute-name</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#92caf4</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编辑模块代码"><a href="#2-编辑模块代码" class="headerlink" title="2. 编辑模块代码"></a>2. 编辑模块代码</h3><p>将css样式文本复制粘贴进去即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/* eslint-disable */</span><br>ace.<span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;ace/theme/vs-dark&quot;</span>,[<span class="hljs-string">&quot;require&quot;</span>,<span class="hljs-string">&quot;exports&quot;</span>,<span class="hljs-string">&quot;module&quot;</span>,<span class="hljs-string">&quot;ace/lib/dom&quot;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br><br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">isDark</span> = <span class="hljs-literal">true</span>;<br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">cssClass</span> = <span class="hljs-string">&quot;ace-vs-dark&quot;</span>;<br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">cssText</span> = <span class="hljs-string">&quot;.ace-vs-dark .ace_gutter &#123;\</span><br><span class="hljs-string">  background: #1e1e1e;\</span><br><span class="hljs-string">  color: #858585;\</span><br><span class="hljs-string">  overflow: hidden;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_print-margin &#123;\</span><br><span class="hljs-string">  width: 1px;\</span><br><span class="hljs-string">  background: #e8e8e8;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark &#123;\</span><br><span class="hljs-string">  background-color: #1e1e1e;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_cursor &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_invisible &#123;\</span><br><span class="hljs-string">  color: #ffffff40;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_constant.ace_buildin &#123;\</span><br><span class="hljs-string">  color: #569cd6;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_constant.ace_language &#123;\</span><br><span class="hljs-string">  color: #b4cea8;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_constant.ace_library &#123;\</span><br><span class="hljs-string">  color: #b5cea8;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_invalid &#123;\</span><br><span class="hljs-string">  background-color: transparent;\</span><br><span class="hljs-string">  color: #ff3333;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_fold &#123;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_support.ace_function &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_support.ace_constant &#123;\</span><br><span class="hljs-string">  color: #569cd6;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_support.ace_type,\</span><br><span class="hljs-string">.ace-vs-dark .ace_support.ace_class .ace-vs-dark .ace_support.ace_other &#123;\</span><br><span class="hljs-string">  color: #4ec9b0;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_variable.ace_parameter &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_keyword.ace_operator &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_comment &#123;\</span><br><span class="hljs-string">  color: #608b4e;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_comment.ace_doc &#123;\</span><br><span class="hljs-string">  color: #608b4e;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_comment.ace_doc.ace_tag &#123;\</span><br><span class="hljs-string">  color: #608b4e;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_constant.ace_numeric &#123;\</span><br><span class="hljs-string">  color: #b5cea8;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_variable &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_xml-pe &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  color: rgb(104, 104, 91);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_entity.ace_name.ace_function &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_heading &#123;\</span><br><span class="hljs-string">  color: #569cd6;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_list &#123;\</span><br><span class="hljs-string">  color: #dcdcdc;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_selection &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  background: rgb(181, 213, 255);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_step &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  background: rgb(252, 255, 0);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_stack &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  background: rgb(164, 229, 101);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_bracket &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  margin: -1px 0 0 -1px;\</span><br><span class="hljs-string">  border: 1px solid rgb(192, 192, 192);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_active-line &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  background: rgba(0, 0, 0, 0.07);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_gutter-active-line &#123;\</span><br><span class="hljs-string">  background-color: #0f0f0f;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_marker-layer .ace_selected-word &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  background: rgb(250, 250, 255);\</span><br><span class="hljs-string">  border: 1px solid rgb(200, 200, 250);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_storage,\</span><br><span class="hljs-string">.ace-vs-dark .ace_keyword,\</span><br><span class="hljs-string">.ace-vs-dark .ace_meta.ace_tag &#123;\</span><br><span class="hljs-string">  color: #569cd6;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_string.ace_regex &#123;\</span><br><span class="hljs-string">  /**/\</span><br><span class="hljs-string">  color: rgb(255, 0, 0);\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_string &#123;\</span><br><span class="hljs-string">  color: #d69d85;\</span><br><span class="hljs-string">&#125;\</span><br><span class="hljs-string">.ace-vs-dark .ace_entity.ace_other.ace_attribute-name &#123;\</span><br><span class="hljs-string">  color: #92caf4;\</span><br><span class="hljs-string">&#125;\n&quot;</span>;<br><br><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-引入自定义主题"><a href="#3-引入自定义主题" class="headerlink" title="3. 引入自定义主题"></a>3. 引入自定义主题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">ace.<span class="hljs-property">config</span>.<span class="hljs-title function_">setModuleUrl</span>(<br>  <span class="hljs-string">&quot;ace/theme/vs-dark&quot;</span>,<br>  <span class="hljs-comment">// eslint-disable-next-line import/no-webpack-loader-syntax</span><br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;file-loader?esModule=false!./vs-dark.js&quot;</span>)<br>);<br><br><br>ace.<span class="hljs-title function_">edit</span>(context, &#123;<br>  <span class="hljs-attr">fontSize</span>: <span class="hljs-number">15</span>,<br>  <span class="hljs-attr">theme</span>: <span class="hljs-string">&quot;ace/theme/vs-dark&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ace-editor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS实现选项卡效果</title>
    <link href="/2020/fbfc7ca56351/"/>
    <url>/2020/fbfc7ca56351/</url>
    
    <content type="html"><![CDATA[<p>不使用Javascript，如何实现选项卡效果呢？</p><span id="more"></span><p>具体效果：</p><img src="https://img.chanx.tech/i/2022/06/12/a5otc_0.png" alt="Snipaste_2020-09-13_16-48-03" style="zoom:50%;" /><p>本文将不会使用到js，使用html+css完成所需效果。你可能会有疑问不使用js的情况下，怎么实现点击切换的效果？</p><p>首先我们要知道，单选框选项组是怎么写的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>另外我们要知道一个非常重要的<code>&lt;label&gt;</code>的<code>for</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item1&quot;</span>&gt;</span>choose item1<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item2&quot;</span>&gt;</span>choose item2<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item3&quot;</span>&gt;</span>choose item3<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击相应的<code>&lt;label&gt;</code>相应的单选框将会被选中</p><p>有了它，我们就可以进一步发挥想象的空间 &#x3D;&gt; 一个<code>label</code>相当于一个<code>tab选项卡</code></p><p>然后就是我们选项卡的内容了，将每一个卡的内容视为一张卡片</p><p>我们把卡片叠到一起，只要其中一张不透明，其余卡片都透明就可以实现选择效果</p><p>如何实现透明度的切换，就需要利用到<code>radio</code>的<code>checked</code>这么一个CSS属性</p><p>剩余的浏览代码就可以明白啦</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;swiper&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span> <span class="hljs-attr">checked</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;item3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pic1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/w01.jpg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pic2&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/w02.jpg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pic3&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/w03.jpg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pic-btn&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;item3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.pic</span> <span class="hljs-selector-tag">img</span>&#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*默认所有卡片都透明*/</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#item1</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#pic1</span>,<br><span class="hljs-selector-id">#item2</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#pic2</span>,<br><span class="hljs-selector-id">#item3</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#pic3</span>&#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;//被选中的卡片透明度为<span class="hljs-number">1</span><br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>&#125;<br><br><span class="hljs-comment">/*选项条居中*/</span><br><span class="hljs-selector-class">.pic-btn</span>&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.pic-btn</span> <span class="hljs-selector-tag">label</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cecece</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-comment">/*给当前的选项点覆盖一个黑色，实现active效果*/</span><br><span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn1</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn2</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn3</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>);<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-id">#item1</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn1</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#item2</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn2</span><span class="hljs-selector-pseudo">::before</span>,<br><span class="hljs-selector-id">#item3</span><span class="hljs-selector-pseudo">:checked</span>~<span class="hljs-selector-class">.pic</span> <span class="hljs-selector-id">#btn3</span><span class="hljs-selector-pseudo">::before</span>&#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.6s</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发的坑</title>
    <link href="/2020/b7d311d38999/"/>
    <url>/2020/b7d311d38999/</url>
    
    <content type="html"><![CDATA[<h2 id="Swiper高度自适应"><a href="#Swiper高度自适应" class="headerlink" title="Swiper高度自适应"></a>Swiper高度自适应</h2><p>swiper组件设置高度100%无法生效，这时需要通过手动获取屏幕的高度并给swiper设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">swiperHeight</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//监听页面加载</span><br>onLoad：<span class="hljs-keyword">function</span> (<span class="hljs-params">option</span>)&#123;<br><span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br>wx.<span class="hljs-title function_">getSystemInfo</span>(&#123;<br><span class="hljs-attr">success</span>:<span class="hljs-title function_">functioin</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-keyword">const</span> clientHeight = res.<span class="hljs-property">windowHeight</span>;<br><span class="hljs-keyword">const</span> clientWidth = res.<span class="hljs-property">windowWidth</span>;<br><span class="hljs-keyword">const</span> ratio = <span class="hljs-number">750</span> / clientWidth;<span class="hljs-comment">//计算为百分比</span><br><span class="hljs-keyword">const</span> rpxHeight = ratio * clientHeight;<br>_this.<span class="hljs-title function_">setData</span>(&#123;<br>_this.<span class="hljs-property">swiperHeight</span>: rpxHeight;<span class="hljs-comment">//将计算好的高度给定义好的值</span><br>      &#125;)<br>&#125;<br> &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>将获取到的屏幕高度给swiper设置上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:&#123;&#123;swiperHeight&#125;&#125;rpx;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：style最后的rpx千万不能省略，否则不生效</strong></p><h2 id="小程序下载、预览文档"><a href="#小程序下载、预览文档" class="headerlink" title="小程序下载、预览文档"></a>小程序下载、预览文档</h2><p>把文件下载到临时的缓存，然后再打开。<strong>需要注意上线的项目中文件地址需要https</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>  <span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;文件地址&#x27;</span>;<br>  wx.<span class="hljs-title function_">downloadFile</span>(&#123; <span class="hljs-comment">//下载</span><br>    <span class="hljs-attr">url</span>: url,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>      <span class="hljs-keyword">const</span> filePath = e.<span class="hljs-property">tempFilePath</span>; <span class="hljs-comment">// 临时文件地址</span><br>      wx.<span class="hljs-title function_">openDocument</span>(&#123; <span class="hljs-comment">// 预览</span><br>        <span class="hljs-attr">filePath</span>: filePath,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打开文档成功&#x27;</span>)<br>        &#125;<br>      &#125;)<br>    &#125;,<br>    <span class="hljs-attr">fail</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r)<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="云开发中数据库的权限问题"><a href="#云开发中数据库的权限问题" class="headerlink" title="云开发中数据库的权限问题"></a>云开发中数据库的权限问题</h2><p>需要注意不同的权限导致api获取数据为空</p><h2 id="云函数中使用axios不能直接对返回值进行操作"><a href="#云函数中使用axios不能直接对返回值进行操作" class="headerlink" title="云函数中使用axios不能直接对返回值进行操作"></a>云函数中使用axios不能直接对返回值进行操作</h2><p>解决方案：使用<code>cheerio</code> + <code>utils</code></p><p>相关资料：<a href="https://www.cnblogs.com/CraryPrimitiveMan/p/3674421.html">cheerio</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">request</span>(&#123;<br>  ...<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">let</span> data = <span class="hljs-built_in">eval</span> (util.<span class="hljs-title function_">inspect</span>(res.<span class="hljs-property">data</span>));<br>  cookie = <span class="hljs-built_in">eval</span>(util.<span class="hljs-title function_">inspect</span>(res.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;set-cookie&quot;</span>][<span class="hljs-number">0</span>]));<br><br>  <span class="hljs-keyword">const</span> $ = cheerio.<span class="hljs-title function_">load</span>(data);<br>  $(<span class="hljs-string">&quot;#casLoginForm input&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">index,item</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//解析html</span><br>    ...<br>  &#125;)<br>&#125;)<br>    <br></code></pre></td></tr></table></figure><h2 id="解析并渲染Markdown"><a href="#解析并渲染Markdown" class="headerlink" title="解析并渲染Markdown"></a>解析并渲染Markdown</h2><p><a href="https://github.com/ifanrx/wxParser-plugin">wxpraser-plugin使用</a></p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尝试开发课表和通知小程序</title>
    <link href="/2020/47588929dfd7/"/>
    <url>/2020/47588929dfd7/</url>
    
    <content type="html"><![CDATA[<p>一个简单的学校小程序，包含课程表、查看通知两个功能</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习小程序的开发，因为之前有简单的<code>html + css + js + vue </code>基础，所以直接看了下官方的快速开发模板。就开始上手弄demo，一开始是想做了一个简单的<code>Todolist</code>来练习数据交互。此时问题是没有后端，数据交互只能局限于前端，想用<code>Java</code>写但是觉得码量比较大且本人不太熟悉（课白上了）。用<code>nodejs</code>吧，虽然有js基础感觉学起来不太难，但是毕竟一边查一边学有点麻烦，于是作罢。这个时候我看到了<code>云开发</code>这个东西，js写完前端后端，简单操作数据库还不用学<code>SQL</code>语句，舒服了。查了几下文档就直接上手，另外前后端数据交互使用了<code>axios</code>。做完<code>todolist</code>之后，开始模仿学校两个比较多人使用的小程序进行深入学习。<strong>也发现了两款小程序的设计上的不一样（详细可见”准备工作</strong>“<strong>内容）</strong></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><p><img src="https://img.chanx.tech/i/2022/06/12/962nv_0.png" alt="image-20200904231348892"></p><p>我的大概思路如下：</p><p><strong>课程表</strong>：第一次登录时，通过云开发向教务系统进行数据拉取并保存到数据库；随后的小程序访问都直接通过云开发拉取数据库信息，不再主动向源站（教务系统）拉取数据</p><p><strong>校内通知：</strong>访问新闻通知网并拉取数据保存到数据库，随后小程序访问都直接通过云开发拉取数据库信息，不通过源站获取。另外还需注意的是，为了保证校内通知的及时性，需要对这个云函数<code>getNews()</code>设置触发器，实现定时拉取新数据。</p><hr><p>在我使用小程序和与开发者交流后，我发现两款小程序在某些方面是采取不同的做法：</p><p><strong>A小程序</strong>：课程数据从教务系统拉取后存入数据库，随后小程序访问实际上是小程序和数据库的交互（跟我的差不多</p><p><strong>B小程序</strong>：课程数据从教务系统拉取后本地缓存，随后小程序访问实际上是小程序和本地缓存的交互</p><p>采取A方式的能对多用户的数据做统一分析处理（如选某门课程的人数、大数据成绩分析），减少对源站的访问</p><p>采取B方式的能快速读取数据（读缓存）加速小程序速度，而且小程序后端本身不保存任何用户信息</p><p><strong>本文不对两种方式进行比较研究，采用A方式存入数据库，方便我进行开发学习</strong></p><h3 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h3><p>通过开发者工具查看相关网页的数据交互，尝试用<code>postman</code>或其他工具模拟获取数据的操作，获取数据并对数据进行解析以获取有用信息。我是用浏览器开发者工具一步步获取信息并分析，最后汇总相关接口达到爬虫效果。当然还有其他实现的方式这里不一一介绍</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="校内通知"><a href="#校内通知" class="headerlink" title="校内通知"></a>校内通知</h3><p>校内通知这个就比较简单了，也不需要太多花里胡哨的效果。</p><p>首先就是拿到数据，然后对数据进行过滤处理。</p><p><strong>我的实现是</strong>：后端云函数设置触发器（这里涉及到<code>Cron</code>表达式，很简单的一个东西），定时去拉取数据。然后把新拉取到的数据和数据库中的数据进行比较，新出现的就保存到数据库当中。当用户访问的时候，就可以直接拉数据库的数据。</p><p>你可以把数据分析过滤的逻辑全部写在前端页面上，这样子每次拉取都要过滤分析，我觉得不太好。</p><p>保存到自己的数据库一个好处也就是能实现更多花里胡哨的功能，比如说点赞？浏览记录？评论？甚至可以基于这些信息再整个推荐算法哈哈哈（别想了，你不会写</p><h3 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h3><p>课程表就是拉数据处理数据啦，跟校内通知差不多</p><p><strong>我的实现是</strong>：拉取课程数据，然后将课程数据按周排列，每一周再按星期排列。至于课程表这个展示，就是利用<code>position:absolute</code>定位来实现的</p><p><img src="https://img.chanx.tech/i/2022/06/12/96jv1_0.png" alt="image-20201121192149448"></p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue踩过的坑</title>
    <link href="/2020/a1a947d9e2c8/"/>
    <url>/2020/a1a947d9e2c8/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-router的beforeEach第一次打开页面不执行"><a href="#vue-router的beforeEach第一次打开页面不执行" class="headerlink" title="vue-router的beforeEach第一次打开页面不执行"></a>vue-router的beforeEach第一次打开页面不执行</h2><p>分析：<code>vue.use</code>的时候已经初始化了，挂载的时候hash值没有发生变化，所以不会执行<code>beforeEach</code></p><p>所以正确的代码顺序如下（先路由再初始化）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//token校验</span><br>&#125;);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function">(<span class="hljs-params">h</span>) =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="form只有一个input时按回车会自动提交"><a href="#form只有一个input时按回车会自动提交" class="headerlink" title="form只有一个input时按回车会自动提交"></a><code>form</code>只有一个<code>input</code>时按回车会自动提交</h2><p>W3C 标准中有如下<a href="https://www.w3.org/MarkUp/html-spec/html-spec_8.html#SEC8.2">规定</a>：</p><blockquote><p><em>When there is only one single-line text input field in a form, the user agent should accept Enter in that field as a request to submit the form.</em></p></blockquote><p>即：当一个 form 元素中只有一个输入框时，在该输入框中按下回车应提交该表单。如果希望阻止这一默认行为，可以在 <code>&lt;el-form&gt;</code> 标签上添加 <code>@submit.native.prevent</code>。</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生JS实现复制功能</title>
    <link href="/2020/680010f95661/"/>
    <url>/2020/680010f95661/</url>
    
    <content type="html"><![CDATA[<p>使用<code>document.execCommand(&quot;Copy&quot;);</code>但是它只能是操作可编辑区域的内容，也就是意味着除了 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 这样的输入域以外，是无法使用这个方法的。但是我们可以这个样子实现其他元素的复制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">var</span> text=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>).<span class="hljs-property">innerText</span>;<br><span class="hljs-keyword">var</span> t = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br>t.<span class="hljs-property">style</span>.<span class="hljs-property">display</span>=<span class="hljs-string">&#x27;none&#x27;</span>;<span class="hljs-comment">//隐藏这个输入框</span><br>t.<span class="hljs-property">value</span> = text;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(t);<br>t.<span class="hljs-title function_">select</span>(); <span class="hljs-comment">// 选择对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&quot;Copy&quot;</span>); <span class="hljs-comment">// 执行浏览器复制命令</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>遇到的坑</strong></p><p>在Chrome下调试的时候，这个方法时完美运行的。然后到了移动端调试的时候，坑就出来了。</p><p>对，没错，就是你，ios…</p><p><strong>1、点击复制时屏幕下方会出现白屏抖动，仔细看是拉起键盘又瞬间收起</strong></p><p>知道了抖动是由于什么产生的就比较好解决了。既然是拉起键盘，那就是聚焦到了输入域，那只要让输入域不可输入就好了，在代码中添加<code>input.setAttribute(&#39;readonly&#39;, &#39;readonly&#39;);</code>使这个<code>&lt;input&gt;</code>是只读的，就不会拉起键盘了。</p><p><strong>2、无法复制</strong></p><p>这个问题是由于<code>input.select()</code>在ios下并没有选中全部内容，我们需要使用另一个方法来选中内容，这个方法就是 <code>input.setSelectionRange(0, input.value.length);</code></p><p>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br> input.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;readonly&#x27;</span>, <span class="hljs-string">&#x27;readonly&#x27;</span>);<br> input.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>);<br> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(input);<br>input.<span class="hljs-title function_">setSelectionRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9999</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>);<br>&#125;<br> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(input);<br>&#125;)<br></code></pre></td></tr></table></figure><p>::: tip</p><p>部分内容来自<a href="https://github.com/axuebin/articles/issues/26">axuebin</a></p><p>:::</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天下无敌超级好用的东西</title>
    <link href="/2020/babddf782353/"/>
    <url>/2020/babddf782353/</url>
    
    <content type="html"><![CDATA[<p><a href="https://voidtools.com/zh-cn/">搜索软件Everything</a></p><p><a href="https://zh.snipaste.com/">截图软件Snipaste</a></p><p><a href="https://www.caniuse.com/#home">前端函数兼容性查询</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔essay</category>
      
    </categories>
    
    
    <tags>
      
      <tag>share</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当Minecraft遇上Terraria</title>
    <link href="/2020/8a17bb395855/"/>
    <url>/2020/8a17bb395855/</url>
    
    <content type="html"><![CDATA[<p>Minecraft + Terraria &#x3D; TerraCraft</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>TerraCraft</strong>是一款将两个沙盒神作融合起来的<strong>同人游戏</strong>，由<a href="https://space.bilibili.com/183654671/"><strong>进击的蓝耀西（Bilibili账号）</strong></a>个人开发，使用C++以及自制游戏引擎编写，仅用于练习C++软件工程的开发实践。</p><p>TerraCraft是世界上第一款在单个地图中实现了<strong>无限边界</strong>的横板沙盒平台游戏，你可以在TerraCraft的世界中自由地搭建房子、挖掘方块、探索世界以及与敌人战斗，做任何你喜欢的事情！TerraCraft采用了末影传送门系统，你可以通过各种方式尽可能多地收集末影珍珠来开启更多的传送门，将探索区域拓展得更加广阔！目前TerraCraft实现了地表层、洞穴层和地狱层，同时实现了横向无边界。TerraCraft采用了独特的地层分级机制，将在未来的更新中添加更多的地层（下界绯红森林层、暮色森林层、水晶层、腐蚀层、辐射层、高压层、极压层等）以及更丰富的天空层、太空层、末地层，并使每个层次拥有独特的世界观，敬请期待未来的更新φ(≧ω≦*)♪</p><blockquote><p>作为MC玩家的我非常期待作者的进一步更新，但是由于作者是在校生，此作品当初也只是作者为了参赛而设计，更新的速度自然比不上正常的游戏更新。就目前放出的相对完整的版本，这个游戏也可以玩起来了。</p></blockquote><h2 id="演示视频（Bilibili）"><a href="#演示视频（Bilibili）" class="headerlink" title="演示视频（Bilibili）"></a>演示视频（Bilibili）</h2><hr><p>当Minecraft变成Terraria（2020年7月25日发布）：</p><iframe src="//player.bilibili.com/player.html?aid=926443273&bvid=BV1ZT4y1L7HM&cid=216505428&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:95%;min-height:500px;"> </iframe><p>我 的 泰 拉 世 界（2020年2月24日发布）：</p><iframe src="//player.bilibili.com/player.html?aid=91225099&bvid=BV1H7411F7xv&cid=155758502&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"  style="width:95%;min-height:500px;"> </iframe><p><strong>更详细的信息可以到<a href="http://blueyoshi.cn/terracraft">Terracraft官网</a>查看</strong></p>]]></content>
    
    
    <categories>
      
      <category>随笔essay</category>
      
    </categories>
    
    
    <tags>
      
      <tag>share</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swiper动态加载后无法滑动</title>
    <link href="/2020/5cae0213a330/"/>
    <url>/2020/5cae0213a330/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Vue中使用Swiper，但是父组件会有状态切换，切换后Swiper出现异常（卡着其中一组不能滑动切换）</p><p><img src="https://img.chanx.tech/i/2022/06/12/acoq3_0.png" alt="image-20200806133320474"></p><p>查资料找到解决办法，原因为<strong>swiper在初始化的时候会扫描swiper-wrapper下面的swiper-slide的个数，从而完成初始化，但是由于动态加载是在初始化之后的动作，所以导致无法滑动</strong></p><h2 id="解决方法1：在动态获取数据后，马上对swiper进行初始化"><a href="#解决方法1：在动态获取数据后，马上对swiper进行初始化" class="headerlink" title="解决方法1：在动态获取数据后，马上对swiper进行初始化"></a>解决方法1：在动态获取数据后，马上对swiper进行初始化</h2><p>每次获取数据后再对swiper进行初始化操作，说白了就是先后顺序不能错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">url</span>:finalUrl,<br>    <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;json&quot;</span>,<br>    <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>        $(<span class="hljs-string">&quot;#reportList&quot;</span>).<span class="hljs-title function_">empty</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;reportLength;i++)&#123;<br>            <span class="hljs-keyword">var</span> url=<span class="hljs-string">&quot;&#x27;&quot;</span>+<span class="hljs-string">&quot;reportDetial.html&quot;</span>+location.<span class="hljs-property">search</span>+<span class="hljs-string">&quot;&amp;noticeId=&quot;</span>+reportList[i].<span class="hljs-property">id</span>+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            reportHtml+=<span class="hljs-string">&#x27;&lt;div class=&quot;swiper-slide report-item&quot; onclick=&quot;reportJump(&#x27;</span>+url+<span class="hljs-string">&#x27;)&quot;&gt;&#x27;</span><br>                +<span class="hljs-string">&#x27;&lt;div class=&quot;item-title&quot;&gt;&#x27;</span>+data.<span class="hljs-property">resp</span>[i].<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br>                +<span class="hljs-string">&#x27;&lt;div class=&quot;item-content&quot;&gt;&#x27;</span>+data.<span class="hljs-property">resp</span>[i].<span class="hljs-property">content</span>+<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br>                +<span class="hljs-string">&#x27;&lt;div class=&quot;item-date&quot;&gt;&#x27;</span>+data.<span class="hljs-property">resp</span>[i].<span class="hljs-property">createTime</span>+<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br>            +<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>        &#125;<br>        $(<span class="hljs-string">&quot;#reportList&quot;</span>).<span class="hljs-title function_">append</span>(reportHtml);<br>        <span class="hljs-keyword">var</span> swiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span>(<span class="hljs-string">&#x27;.swiper-container&#x27;</span>, &#123;<br>            slidesPerView : <span class="hljs-number">3</span><br>        &#125;);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="解决方法2：修改Swiper参数实现监听变化"><a href="#解决方法2：修改Swiper参数实现监听变化" class="headerlink" title="解决方法2：修改Swiper参数实现监听变化"></a>解决方法2：修改Swiper参数实现监听变化</h2><p> observer:true,&#x2F;&#x2F;修改swiper自己或子元素时，自动初始化swiper<br> observeParents:true,&#x2F;&#x2F;修改swiper的父元素时，自动初始化swiper</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mySwiper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Swiper</span> (<span class="hljs-string">&#x27;.swiper-container&#x27;</span>, &#123;<br>        <span class="hljs-attr">observer</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//修改swiper自己或子元素时，自动初始化swiper</span><br>        <span class="hljs-attr">observeParents</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//修改swiper的父元素时，自动初始化swiper</span><br>        <span class="hljs-attr">loop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 循环模式选项</span><br>        <span class="hljs-attr">pagination</span>: &#123;<br>            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;.swiper-pagination&#x27;</span>,<br>        &#125;,<br><br>    &#125;)<br></code></pre></td></tr></table></figure><p>::: tip</p><p>部分内容来自<a href="https://www.cnblogs.com/yangguoe/p/9857398.html">Carina</a></p><p>:::</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swiper</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用CDN或对象存储加速网站访问</title>
    <link href="/2020/e81a1169f9b1/"/>
    <url>/2020/e81a1169f9b1/</url>
    
    <content type="html"><![CDATA[<h2 id="CDN和COS是什么"><a href="#CDN和COS是什么" class="headerlink" title="CDN和COS是什么"></a>CDN和COS是什么</h2><p><strong>CDN</strong>：内容分发网络（Content Delivery Network，CDN），是在现有 Internet 中增加的一层新的网络架构，由遍布全球的高性能加速节点构成。这些高性能的服务节点都会按照一定的缓存策略存储您的业务内容，当您的用户向您的某一业务内容发起请求时，请求会被调度至最接近用户的服务节点，直接由服务节点快速响应，有效降低用户访问延迟，提升可用性。</p><p><strong>腾讯云叫COS，阿里云叫OSS。他们是同一个东西</strong></p><p><strong>COS</strong>：对象存储（Cloud Object Storage，COS）是腾讯云提供的一种存储海量文件的分布式存储服务，用户可通过网络随时存储和查看数据。腾讯云 COS 使所有用户都能使用具备高扩展性、低成本、可靠和安全的数据存储服务。</p><p>COS 通过控制台、API、SDK 和工具等多样化方式简单、快速地接入，实现了海量数据存储和管理。通过 COS 可以进行多格式文件的上传、下载和管理。腾讯云提供了直观的 Web 管理界面，同时遍布全国范围的 CDN 节点可以对文件下载进行加速。</p><p><strong>￥&amp;……￥HGSDFS ，他在说什么啊</strong></p><h3 id="细说CDN"><a href="#细说CDN" class="headerlink" title="细说CDN"></a>细说CDN</h3><p>首先我们要知道我们自己的网络服务器叫<strong>源站</strong>，腾讯云访问你服务器的过程叫<strong>回源</strong></p><p>腾讯云在全国各地有服务器，比如说东南西北各一台，然后中间有一台主的服务器</p><p>CDN是内容分发网络，他会访问一遍你的网站的，然后把你网站的一些内容缓存到主服务器上，分发给不同地区的服务器</p><p>当用户需要访问你的网站的时候，他可以从距离最近的服务器上获取资源</p><p><img src="https://img.chanx.tech/i/2022/06/12/cjflp_0.png" alt="image-20200724211306537"></p><p><img src="https://img.chanx.tech/i/2022/06/12/cjxmi_0.png" alt="image-20200724212250162"></p><p>联系日常生活来看，其实京东自营仓库跟这个就差不多</p><p>京东自营为什么能做到次日达，因为他在好几个地方建了仓库</p><p>比如他卖一个小饼干，他会在华南华北华东华西都分别储备一些小饼干</p><p>我广东地区的人买小饼干，他就直接在华南仓库发货</p><p>山东地区的人买小饼干，他就华北仓库发货</p><p>这样子就大大减少了物流时间，实现快速送货</p><p>而往往淘宝店都是些小店，他的店在广东，你在东北下单，商品不得不跨越大中国才到你的手里</p><h3 id="细说COS"><a href="#细说COS" class="headerlink" title="细说COS"></a>细说COS</h3><p>这个…我也不太懂啦</p><p>大概就是你只需要把重心放在文件上，如何安全地存储和传输文件都是他帮你做的</p><p>多样化的接入方式和多节点的存储，让你使用数据更加方便</p><p>前者就是不同的api文档啦，要用什么就看什么文档</p><p>后者就是什么多备份防止丢失、CDN加速等等</p><h2 id="利用CDN和COS"><a href="#利用CDN和COS" class="headerlink" title="利用CDN和COS"></a>利用CDN和COS</h2><p>COS可以用来放图片、文档什么的静态资源（就是不会变的那些</p><p>因为它云服务器的访问和传输速度当然比我自己的辣鸡小服务器快</p><p>我的辣鸡小服务器才5Mbps，放几张图片去访问就要等半天加载</p><p>如果是一张8M大图，那就呵呵呵呵呵呵呵呵呵</p><p>有了COS访问速度已经不错了，我们还可以用CDN进行优化</p><p>将COS的内容分发各地，能避免同一时间对COS的集中访问</p><p>对于我这种小破站来说，用COS或者CDN其中一个都是足够了</p><p>小破站主要是图片资源瞬间占用带宽严重，任意一个都能解决我目前遇到的问题</p><p>其实小破站也就自己访问比较多….等一会才多大事</p><p>但是！！！能白嫖的CDN和COS谁不喜欢呢？（滑稽）</p><p>CDN的使用大概就是把域名原来指向源站ip改成指向CDN服务器，然后在CDN里设置好源站IP和相关访问限制（如跨域、防盗链</p><p>COS最好是使用相关的客户端，因为我更多的时写Markdown时引入图片，所以我是配合<strong>Typora软件</strong>和<strong>PicGo自动上传图片</strong>使用</p><p>PicGo相关配置我应该会用一篇文章记录</p><p>::: tip<br>部分文章内容来自<a href="https://cloud.tencent.com/document/product">腾讯云</a><br>:::</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次笔记本加装内存条</title>
    <link href="/2020/78131f66b714/"/>
    <url>/2020/78131f66b714/</url>
    
    <content type="html"><![CDATA[<p>第一次给笔记本加装内存条</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先查看自己的电脑配置，看看需要什么类型的内存条</p><p>我搜了一下我的飞行（坠机）堡垒的配置，一开始没查到，后来在任务管理器看到相关信息</p><p><img src="https://img.chanx.tech/i/2022/06/12/b2hz9_0.png" alt="image-20200720214431210"></p><p>然后就是去买内存条了，个人习惯京东。（记得准备螺丝刀，或者问问客服送不送</p><img src="https://img.chanx.tech/i/2022/06/12/bca7l_0.png" alt="image-20200720214828662"  /><img src="https://img.chanx.tech/i/2022/06/12/bc5bx_0.png" alt="image-20200720214907805"  /><h2 id="动手安装"><a href="#动手安装" class="headerlink" title="动手安装"></a>动手安装</h2><p>由于之前给笔记本换过硬盘，拆外壳有些经验（记得把螺丝放好，起壳的时候不要太暴力一般都ok</p><img src="https://img.chanx.tech/i/2022/06/12/bej2f_0.png" alt="image-20200720215547078"  /><img src="https://img.chanx.tech/i/2022/06/12/d544c_0.png" alt="image-20200720215743477"  /><img src="https://img.chanx.tech/i/2022/06/12/bfb04_0.png" alt="image-20200720215947906"  /><p>对准插口和卡孔，倾斜约30°，向下压到两侧卡扣卡住即可。</p><img src="https://img.chanx.tech/i/2022/06/12/d65ro_0.png" alt="image-20200720220231236"  /><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>打开电脑，第一次进去可能比平时稍微久一点，应该是读新内存的信息</p><p>然后打开任务管理器，看到内存从7.9G变成15.9G，大功告成。</p><img src="https://img.chanx.tech/i/2022/06/12/bhbnb_0.png" alt="Snipaste_2020-07-20_13-17-10" />]]></content>
    
    
    <categories>
      
      <category>随笔essay</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>[转]Vuepress中Last Updated时间有误</title>
    <link href="/2020/89e0aa18d601/"/>
    <url>/2020/89e0aa18d601/</url>
    
    <content type="html"><![CDATA[<p>原文出处：<a href="https://ty-peng.gitee.io/views/note/ops/202004141352-vuepress-last-updated.html">ty-peng - VuePress Last Updated 时间有误的解决</a></p><span id="more"></span><h2 id="此文章为转载"><a href="#此文章为转载" class="headerlink" title="此文章为转载"></a><strong>此文章为转载</strong></h2><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>之前一直以为文章<code>Last Updated</code>的时间每次都是取最新的时间是因为推送Pages分支时强制提交，只有一个最新提交的原因， 所以一直没去管，今天发觉按理编译之前<code>Last Updated</code>时间就已经确定了才对，于是找了下原因。</p><p>去VuePress的文档页面看了下，在默认主题的配置里有说明：</p><p>::: tip<br>VuePress的插件<code>last-updated</code>是基于<code>git</code>的，使用<code>git commit</code>的时间戳作为最后更新时间。<br>:::</p><p>我在本地编译运行了一下，发现<code>Last Updated</code>时间是对的， 但是通过GitHub Actions编译后的时间有误，都只是最新的时间。</p><p>检查workflow文件<code>main.yml</code>， 其中和之前本地部署不同的步骤应该只有<code>Checkout</code>那一步，</p><p>找到相关文档，查看配置项，其中有一项：</p><p>::: tip</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Number of commits to fetch. 0 indicates all history.</span><br><span class="hljs-comment"># Default: 1</span><br><span class="hljs-attr">fetch-depth:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><code>fetch-depth</code>：要获取的提交数，0表示所有历史记录，默认为1。<br>:::</p><p>这就是问题的根源所在，在GitHub Actions中，按之前的配置，<code>fetch-depth</code>未配置取默认值1， 使用<code>Checkout</code>插件checkout代码只会fetch一个提交， 所以<code>Last Updated</code>插件获取不到其他文章的正确提交时间， 最后编译时都使用了最后一次提交时间作为最后更新时间。</p><p>修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">🛎️</span><br><span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><span class="hljs-attr">with:</span><br>  <span class="hljs-attr">persist-credentials:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Number of commits to fetch. 0 indicates all history.</span><br>  <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>提交推送远程仓库，自动部署，<code>Last Updated</code>时间恢复正常。</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vuepress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuepress中使用Vue组件</title>
    <link href="/2020/3b49b37114d5/"/>
    <url>/2020/3b49b37114d5/</url>
    
    <content type="html"><![CDATA[<p>在Vuepress使用Vue组件</p><span id="more"></span><p>所有在<code>.vuepress/components</code>中找到的<code>*.vue</code>文件将会自动地被注册为全局的异步组件，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>└─ <span class="hljs-selector-class">.vuepress</span><br>   └─ components<br>      ├─ demo-<span class="hljs-number">1</span><span class="hljs-selector-class">.vue</span><br>      ├─ OtherComponent<span class="hljs-selector-class">.vue</span><br>      └─ Foo<br>         └─ Bar.vue<br></code></pre></td></tr></table></figure><p>现在我们有一个组件是<code>Example.vue</code></p><h2 id="页面组件"><a href="#页面组件" class="headerlink" title="页面组件"></a>页面组件</h2><p>我们现在有一个页面是<code>Readme.md</code>，然后在Front Matter里填写字段<code>Layout: Example</code>，此时整个页面会被组件代替</p><h2 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h2><p>有时候我们只是想在页面里引入一个小组件，而不是想引入一个页面。那么可以直接在Markdown文件里写下<code>&lt;Example/&gt;</code>（markdown文件里支持vue的语法，而组件被全局注册，所以直接写就行，另外还有一些表达式什么的都可以）</p><p>详细介绍文档可以见：<a href="https://www.vuepress.cn/guide/using-vue.html">Vuepress官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vuepress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计与分析基础</title>
    <link href="/2020/88e79e65fb37/"/>
    <url>/2020/88e79e65fb37/</url>
    
    <content type="html"><![CDATA[<p>专业课内容节选自《算法设计与分析基础》潘彦（译）</p><span id="more"></span><p>绪论：欧几里得算法的证明和实现（扩展：扩展欧几里得算法）、求最大公约数的多种算法（扩展：最小公倍数）、素数判定的多种算法、基本数据结构</p><p>算法效率分析基础：描述效率的渐进式符号、非递归和递归的效率分析</p><p>蛮力法：选择和冒泡排序、顺序查找和字符串匹配、最近对和凸包问题、穷举查找（旅行商问题、背包问题、分配问题、DFS和BFS）</p><p>减治法：插入排序、拓扑排序、生成组合对象的算法（生成排列、子集）、减常因子算法（折半查找、假币问题）、减可变规模算法：计算中值和选择问题、插值查找</p><p>分治法：合并排序、快速排序、二叉树遍历及其相关特性、大整数乘法和Strassen矩阵乘法、最近对和凸包问题</p><p>变治法：预排序、高斯消去法、AVL树四种旋转、堆排序、霍纳法则和二进制幂、问题化简（最小公倍数）</p><p>时空权衡：计数排序（比较、分布、字符串匹配：Horspool、Boyer-Moore）</p><p>动态规划：背包问题和记忆化功能、最优二叉查找树、Warshall和Floyd算法</p><p>贪婪技术：Prim算法、Kruskal算法、Dijkstra算法、哈夫曼树及其编码</p><p>部分练习题如下：</p><p><img src="https://img.chanx.tech/i/2022/06/12/7ep46_0.png" alt="2020061801"></p><p><img src="https://img.chanx.tech/i/2022/06/12/7enk4_0.png" alt="2020061802"></p>]]></content>
    
    
    <categories>
      
      <category>笔记note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专业课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欧几里得公式证明</title>
    <link href="/2020/849e81e85fab/"/>
    <url>/2020/849e81e85fab/</url>
    
    <content type="html"><![CDATA[<p> <strong>先说结论：</strong><code>gcd(a,b) = gcd(b,a mod b)</code></p><p><strong>证明：</strong></p><p>写出式子：<code>a = b*q + a mod b</code>令<code>r = a mod b</code></p><p>① 假设d是(a,b)的一个公约数，则</p><p><code>d|a且d|b</code>，而<code>r = a - kb</code>，因此<code>d|r</code></p><p><u>因此d是(b,a mod b)的公约数</u></p><p>② 假设d是(b,a mod b)的公约数，则</p><p><code>d|b且d|r</code> ，但是<code>a = kb + r</code></p><p><u>因此d也是(a,b)的公约数</u></p><p><strong>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，得证</strong></p><p><img src="https://img.chanx.tech/i/2022/06/12/92a9p_0.png" alt="image-20200611125658094"></p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vuepress基于Valine的评论功能</title>
    <link href="/2020/c2085db159da/"/>
    <url>/2020/c2085db159da/</url>
    
    <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果使用 <code>npm</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save vuepress-plugin-comment<br></code></pre></td></tr></table></figure><p>如果使用 <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yarn add vuepress-plugin-comment -D<br></code></pre></td></tr></table></figure><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><h3 id="vuepress项目引用"><a href="#vuepress项目引用" class="headerlink" title="vuepress项目引用"></a>vuepress项目引用</h3><p>将 <code>vuepress-plugin-comment</code> 添加到vuepress项目的插件配置中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    [<br>      <span class="hljs-string">&#x27;vuepress-plugin-comment&#x27;</span>,<br>      &#123;<br>        <span class="hljs-attr">choosen</span>: <span class="hljs-string">&#x27;valine&#x27;</span>, <br>        <span class="hljs-comment">// options选项中的所有参数，会传给Valine的配置</span><br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#valine-vuepress-comment&#x27;</span>,<br>          <span class="hljs-attr">appId</span>: <span class="hljs-string">&#x27;Your own appId&#x27;</span>,<br>          <span class="hljs-attr">appKey</span>: <span class="hljs-string">&#x27;Your own appKey&#x27;</span><br>        &#125;<br>      &#125;<br>    ]<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取appId和appKey"><a href="#获取appId和appKey" class="headerlink" title="获取appId和appKey"></a>获取appId和appKey</h3><p>请先<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a> <code>LeanCloud</code>, 进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp">创建应用</a>：</p><p><img src="https://img.chanx.tech/i/2022/06/12/atlyz_0.jpeg" alt="img"></p><p>应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：</p><p><img src="https://img.chanx.tech/i/2022/06/12/atxsc_0.jpeg" alt="img"></p><p>把获取到的appId和appKey填入vuepress的插件配置当中，就可以使用评论功能了。</p><h3 id="更多配置项"><a href="#更多配置项" class="headerlink" title="更多配置项"></a>更多配置项</h3><h4 id="el"><a href="#el" class="headerlink" title="el"></a>el</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>null</code></li><li>必要性:<code>true</code></li></ul><p>Valine 的初始化挂载器。可以是一个<code>CSS 选择器</code>，也可以是一个实际的<code>HTML元素</code>。</p><h4 id="appId"><a href="#appId" class="headerlink" title="appId"></a>appId</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>null</code></li><li>必要性:<code>true</code></li></ul><p>从<code>LeanCloud</code>的应用中得到的<code>appId</code>.</p><blockquote><p><a href="https://valine.js.org/quickstart.html">获取appId 和 appKey</a>。</p></blockquote><h4 id="appKey"><a href="#appKey" class="headerlink" title="appKey"></a>appKey</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>null</code></li><li>必要性:<code>true</code></li></ul><p>从<code>LeanCloud</code>的应用中得到的<code>appKey</code>.</p><blockquote><p><a href="https://valine.js.org/quickstart.html">获取appId 和 appKey</a>。</p></blockquote><h4 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>Just go go</code></li><li>必要性:<code>false</code></li></ul><p>评论框<code>占位提示符</code>。</p><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>window.location.pathname</code></li><li>必要性:<code>false</code></li></ul><p>当前<code>文章页</code>路径，用于区分不同的<code>文章页</code>，以保证正确读取该<code>文章页</code>下的评论列表。<br>可选值：</p><ul><li><code>window.location.pathname</code> (默认值，推荐)</li><li><code>window.location.href</code></li><li><code>自定义</code></li></ul><blockquote><ul><li>I. 请保证每个<code>文章页</code>路径的唯一性，否则可能会出现不同<code>文章页</code>下加载相同评论列表的情况。</li><li>II. 如果值为<code>window.location.href</code>，可能会出现随便加<code>不同参数</code>进入该页面，而被判断成新页面的情况。</li></ul></blockquote><h4 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>mm</code></li><li>必要性:<code>false</code></li></ul><p><code>Gravatar</code> 头像展示方式。</p><p>可选值：</p><ul><li><code>&#39;&#39;</code>(空字符串)</li><li><code>mp</code></li><li><code>identicon</code></li><li><code>monsterid</code></li><li><code>wavatar</code></li><li><code>retro</code></li><li><code>robohash</code></li><li><code>hide</code></li></ul><p>更多信息，请查看<a href="https://valine.js.org/avatar.html">头像配置</a>。</p><h4 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h4><ul><li>类型:<code>Array</code></li><li>默认值:<code>[&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;]</code></li><li>必要性:<code>false</code></li></ul><p>评论者相关属性。</p><h4 id="pageSize"><a href="#pageSize" class="headerlink" title="pageSize"></a>pageSize</h4><ul><li>类型:<code>Number</code></li><li>默认值:<code>10</code></li><li>必要性:<code>false</code></li></ul><p>评论列表分页，每页条数。</p><h4 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h4><ul><li>类型:<code>String</code></li><li>默认值:<code>zh-CN</code></li><li>必要性:<code>false</code></li></ul><p>多语言支持。</p><p>可选值：</p><ul><li><code>zh-CN</code></li><li><code>zh-TW</code></li><li><code>en</code></li><li><code>ja</code></li></ul><p>如需<code>自定义语言</code>，请参考<a href="https://valine.js.org/i18n.html">i18n</a>。</p><h4 id="visitor"><a href="#visitor" class="headerlink" title="visitor"></a>visitor</h4><ul><li>类型:<code>Boolean</code></li><li>默认值:<code>false</code></li><li>必要性:<code>false</code></li></ul><p><a href="https://valine.js.org/visitor.html">文章访问量统计</a>。</p><h4 id="highlight"><a href="#highlight" class="headerlink" title="highlight"></a>highlight</h4><ul><li>类型：<code>Boolean</code></li><li>默认值: <code>true</code></li><li>必要性: <code>false</code></li></ul><p><code>代码高亮</code>，默认开启，若不需要，请手动关闭</p><h4 id="avatarForce"><a href="#avatarForce" class="headerlink" title="avatarForce"></a>avatarForce</h4><ul><li>类型: <code>Boolean</code></li><li>默认值: <code>false</code></li><li>必要性: <code>false</code></li></ul><p>每次访问<code>强制</code>拉取最新的<code>评论列表头像</code></p><blockquote><p>不推荐设置为<code>true</code>，目前的<code>评论列表头像</code>会自动带上<code>Valine</code>的版本号</p></blockquote><h4 id="recordIP"><a href="#recordIP" class="headerlink" title="recordIP"></a>recordIP</h4><ul><li>类型: <code>Boolean</code></li><li>默认值: <code>false</code></li><li>必要性: <code>false</code></li></ul><p>是否记录评论者IP</p><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span>+<br></code></pre></td></tr></table></figure></blockquote><h4 id="serverURLs"><a href="#serverURLs" class="headerlink" title="serverURLs"></a>serverURLs</h4><ul><li>类型: <code>String</code></li><li>默认值: <code>http[s]://[tab/us].avoscloud.com</code></li><li>必要性: <code>false</code></li></ul><blockquote><p>⚠️ 该配置适用于国内<code>自定义域名</code>用户, <code>海外版本</code>会自动检测(无需手动填写) <code>v1.3.10+</code></p></blockquote><h4 id="emojiCDN"><a href="#emojiCDN" class="headerlink" title="emojiCDN"></a>emojiCDN</h4><ul><li>类型: <code>String</code></li><li>默认值: &#96;&#96;</li><li>必要性: <code>false</code></li></ul><p>设置<code>表情包CDN</code>，参考<a href="https://valine.js.org/emoji.html">自定义表情</a></p><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">5</span>+<br></code></pre></td></tr></table></figure></blockquote><h4 id="emojiMaps"><a href="#emojiMaps" class="headerlink" title="emojiMaps"></a>emojiMaps</h4><ul><li>类型: <code>Object</code></li><li>默认值: <code>null</code></li><li>必要性: <code>false</code></li></ul><p>设置<code>表情包映射</code>，参考<a href="https://valine.js.org/emoji.html">自定义表情</a></p><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">5</span>+<br></code></pre></td></tr></table></figure></blockquote><h4 id="enableQQ"><a href="#enableQQ" class="headerlink" title="enableQQ"></a>enableQQ</h4><ul><li>类型: <code>Boolean</code></li><li>默认值: <code>false</code></li><li>必要性: <code>false</code></li></ul><p>是否启用<code>昵称框</code>自动获取<code>QQ昵称</code>和<code>QQ头像</code>, 默认关闭，需<code>博/网站主</code>主动启用</p><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">6</span>+<br></code></pre></td></tr></table></figure></blockquote><h4 id="requiredFields"><a href="#requiredFields" class="headerlink" title="requiredFields"></a>requiredFields</h4><ul><li>类型: <code>Array</code></li><li>默认值: <code>[]</code></li><li>必要性: <code>false</code></li></ul><p>设置<code>必填项</code>，默认<code>匿名</code>，可选值：</p><ul><li><code>[&#39;nick&#39;]</code></li><li><code>[&#39;nick&#39;,&#39;mail&#39;]</code></li></ul><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">6</span>+<br></code></pre></td></tr></table></figure></blockquote><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><p><a href="https://valine.js.org/avatar.html">头像配置</a>、<a href="http://www.zhaojun.im/hexo-valine-admin/">邮件提醒</a>、<a href="https://valine.js.org/i18n.html">多语言支持</a>、<a href="https://valine.js.org/visitor.html">文章阅读量统计</a>、<a href="https://valine.js.org/emoji.html">自定义表情</a></p><p><u>其中，邮件提醒有几个小问题</u>：</p><ol><li><p><strong>国内版的绑定域名貌似需要备案</strong></p></li><li><p><strong>LeanCloud休眠调整，定时任务self_wake无法唤醒</strong> &#x3D;&gt; 解决办法可以参考<a href="https://www.antmoe.com/posts/ff6aef7b/">小康博客</a></p><p><strong>我的解决办法</strong>是利用我windows服务器自带的计划任务定时访问评论后台达到唤醒效果：</p><p>首先新建一个bat文件（效果大概是自动打开IE浏览器访问指定网页，30秒后关闭浏览器）</p><blockquote><p>建好bat文件之后最好先自己访问一遍确定IE浏览器访问的时候能正常访问到网页</p><p>如果访问速度较慢，建议把30秒调成更长的时间来保证稳定</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">explorer.exe open=你的评论后台地址<br>Ping -n 30 127.1&gt;nul<br>Taskkill /f /im <span class="hljs-string">&quot;iexplore.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.chanx.tech/i/2022/06/12/avokr_0.png" alt="image-20200613101522289"></p><p><img src="https://img.chanx.tech/i/2022/06/12/avz41_0.png" alt="image-20200613101209202"></p><p><img src="https://img.chanx.tech/i/2022/06/12/avvcm_0.png" alt="image-20200613101238985"></p><p><img src="https://img.chanx.tech/i/2022/06/12/awllk_0.png" alt="image-20200613101304356"></p></li><li><p><strong>Valine的管理员账户（部署后&#x2F;sign-up页面出现Not Found）</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lsl">LeanCloud结构化数据里_User表添加一行<br>必备三个字段<span class="hljs-section">email</span>（此 <span class="hljs-section">email</span> 必须为配置中的 SMTP_USER 或 TO_EMAIL）、username、password<br>然后进入到评论管理后台<br>账号为<span class="hljs-section">email</span>字段输入的信息<br>密码为password字段输入的信息<br></code></pre></td></tr></table></figure></li></ol><hr><p>::: tip<br>部分文字整理自<a href="https://valine.js.org/">Valine官网</a>、<a href="https://github.com/zhaojun1998/Valine-Admin">Valine-Admin</a>及其他相关网页<br>:::</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Vuepress</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生JS实现简单计时器</title>
    <link href="/2020/c3c099a07c97/"/>
    <url>/2020/c3c099a07c97/</url>
    
    <content type="html"><![CDATA[<p>在线预览: <strong><a href="http://demo.chanx.tech/timer.html">点我查看demo</a></strong></p><span id="more"></span><h2 id="做什么"><a href="#做什么" class="headerlink" title="做什么"></a>做什么</h2><p>用原生的js实现一个简单计时器。比如说记录编辑框他输入内容所用的时间。</p><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p><strong>HTML</strong></p><p>一个编辑框和一个时间显示器</p><p><strong>JS</strong></p><p>编辑框获得焦点时<code>setInterval()</code>进行计时,失去焦点时<code>clearInterval()</code>取消计时<br>另外利用<code>localStorage</code>可以进行数据的保存，刷新后能读取上次的时间</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>计时器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;status&quot;</span>&gt;</span>计时器案例 - 未做题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;inputFocus()&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;innputBlur()&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;点击输入框开始计时&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timer&quot;</span>&gt;</span>做题时长: 0时0分0秒<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;resetTime()&quot;</span>&gt;</span>重新计时<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> second = <span class="hljs-number">0</span>; <span class="hljs-comment">//记录时间-秒</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> timing;     <span class="hljs-comment">//定时器</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//更新显示时间</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTime</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _hour = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(second /<span class="hljs-number">3600</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _minute =  <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((second%<span class="hljs-number">3600</span>) / <span class="hljs-number">60</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> _second = (second%<span class="hljs-number">3600</span>) %<span class="hljs-number">60</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timer&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;做题时长：&quot;</span>+_hour+<span class="hljs-string">&quot;时&quot;</span>+_minute+<span class="hljs-string">&quot;分&quot;</span>+_second+<span class="hljs-string">&quot;秒&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">resetTime</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">0</span>);</span><br><span class="language-javascript">            second = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">            <span class="hljs-title function_">updateTime</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//输入框获得焦点时开始计时</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">inputFocus</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;status&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;计时器案例 - 做题中&quot;</span>;</span><br><span class="language-javascript">            timing = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                second ++;</span><br><span class="language-javascript">                <span class="hljs-title function_">updateTime</span>();</span><br><span class="language-javascript">            &#125;,<span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//输入框失去焦点取消计时</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">innputBlur</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;status&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;计时器案例 - 未做题&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(timing);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//网页加载完执行数据初始化</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> t = <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;time&quot;</span>);</span><br><span class="language-javascript">            second = t?<span class="hljs-attr">t</span>:<span class="hljs-number">0</span>; <span class="hljs-comment">//无数据时默认为0</span></span><br><span class="language-javascript">            <span class="hljs-title function_">updateTime</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//网页刷新前进行数据缓存</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">innputBlur</span>();</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;time&quot;</span>,second);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>是否可以利用两个开始和结束的两个时间戳获取一个时间段？但是需要注意的是我们<code>new Date()</code>获取的时间可能会受到系统时间的影响，导致获取的数据不合法。(2020-06-06) </p><p><strong><code>setTimeout</code>和<code>setInterval</code>究竟谁更适合实现计时？</strong></p><blockquote><p>看了红宝书，里面说了一句setInterval很少会出现在生产环境。于是想到了该计时器的实现。</p></blockquote><p><code>setInterval</code>到了时间就会把回调函数推进消息队列，所以不适合长时间和阻塞的循环任务，比如时间长的ajax不断被推进消息队列，然后消息队列越来越长，影响整个系统。与此同时，不能保证两次任务之间保持间隔。<code>setTimeout</code>实现循环任务就能保证任务有间隔，上一次任务成功回调才到下一次。</p><p>然而对于计时器这种比较简单的任务来说，不至于出现<code>setInterval</code>被塞爆的情况。而且计时器我们关注的是到时间就把回调推进消息队列，而不是两次时间增长之间保持间隔。</p><p><strong>所以我认为在这个场景下，<code>setInterval</code>是更适合计时器的。</strong>（2020-11-18）</p><p>另外，由于JS的运行机制。两种定时器的实现方式都是有微小误差的。而<code>performance</code>中的<code>计时api</code>适合于性能检测等高精度时间计算，不适合用在这</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Demo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2020/df01805815a5/"/>
    <url>/2020/df01805815a5/</url>
    
    <content type="html"><![CDATA[<h2 id="汉字在计算机中的表示方法"><a href="#汉字在计算机中的表示方法" class="headerlink" title="汉字在计算机中的表示方法"></a>汉字在计算机中的表示方法</h2><h3 id="汉字的输入编码（输入）"><a href="#汉字的输入编码（输入）" class="headerlink" title="汉字的输入编码（输入）"></a>汉字的输入编码（输入）</h3><blockquote><p><strong>国标码 &#x3D; 区位码（十六进制）+ 2020H</strong></p></blockquote><ol><li>数字编码<br>常用的是国标区位码，用数字串表示一个汉字的输入。</li><li>拼音码（拼音输入）</li><li>字形编码（五笔输入）<h3 id="汉字内码（内部处理）"><a href="#汉字内码（内部处理）" class="headerlink" title="汉字内码（内部处理）"></a>汉字内码（内部处理）</h3><blockquote><p><strong>汉字内码 &#x3D; 国标码 + 8080H</strong></p></blockquote></li></ol><p>用于汉字信息的存储、交换、检索等操作的机内代码，一般为双字节表示。</p><h3 id="汉字字模码（输出）"><a href="#汉字字模码（输出）" class="headerlink" title="汉字字模码（输出）"></a>汉字字模码（输出）</h3><p>用点阵来表示汉字字形，就是操作系统中的字体库文件。当显示输出或打印输出的时候才会检索字库。</p><h2 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h2><h3 id="简单奇偶校验"><a href="#简单奇偶校验" class="headerlink" title="简单奇偶校验"></a>简单奇偶校验</h3><p>奇校验 ── 整个校验码（有效信息位和校验位）中“1”的个数为奇数<br>偶校验 ── 整个校验码中“1”的个数为偶数</p><blockquote><p>简单奇偶校验只能检测奇数个错误检测，无法检测偶数个错误，更无法识别错误的位置</p></blockquote><h3 id="交叉奇偶校验"><a href="#交叉奇偶校验" class="headerlink" title="交叉奇偶校验"></a>交叉奇偶校验</h3><p>横向和纵向都有奇偶校验，提高检测到错误的概率</p><h3 id="海明校验码（多重奇偶校验）"><a href="#海明校验码（多重奇偶校验）" class="headerlink" title="海明校验码（多重奇偶校验）"></a>海明校验码（多重奇偶校验）</h3><p><a href="https://blog.csdn.net/weixin_42426249/article/details/89428080">见CSDN博客</a></p><h3 id="循环冗余校验码"><a href="#循环冗余校验码" class="headerlink" title="循环冗余校验码"></a>循环冗余校验码</h3><p><a href="https://blog.csdn.net/T146lLa128XX0x/article/details/88968511">见CSDN博客（例题有误）</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专业课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020阿里云备案过程记录</title>
    <link href="/beian/"/>
    <url>/beian/</url>
    
    <content type="html"><![CDATA[<p>历经<strong>大约一个月</strong>时间，成功完成备案的所有操作。</p><span id="more"></span><p>没上大学的时候偶尔也会买个虚拟空间自己瞎弄，但是后面觉得买虚拟空间太烦，而且便宜的经常性断连；上了大学后，用着 <a href="https://promotion.aliyun.com/ntms/act/campus2018.html">阿里云的学生云主机</a> 跑我的Java课程设计（一个简单的即时聊天程序）。后来发现闲置的云主机能用来跑些网页demo什么的，但是IP访问太不爽了。于是下定决心碰一下备案这块东西。</p><h2 id="备案初审1天"><a href="#备案初审1天" class="headerlink" title="备案初审1天"></a>备案初审1天</h2><p>在阿里云手机APP上进行网站和个人主体基本信息的填写，要进行人脸识别什么的。</p><p><strong>网站名称就写自己网站要干什么好了</strong></p><p>这个没什么关系，备完案之后想什么名字就什么名字（不违法就好</p><p>各种信息填写完成后，提交阿里云，他会帮你把材料看一遍，看看什么问题</p><p>当天下午阿里云打来电话，核对了身份证和域名信息之后</p><p>说我的网站名称不合格（XXX的个人网站），改一个跟内容相关的（前端技术学习笔记）</p><p>然后问了几个问题，关于你网站用途的</p><p>我说是记录一些学习笔记，个人博客这个样子</p><p>你有什么不懂的也能问问他</p><h2 id="管局审核7天"><a href="#管局审核7天" class="headerlink" title="管局审核7天"></a>管局审核7天</h2><p>4月28日，通过阿里云的初审之后，他会帮你把材料递给通信管理局</p><p>阿里云客服说管局审核期间要保持电话畅通，管局可能会有人打电话</p><p>然后就天天看手机，等等等等等，好几次房地产推销电话让我惊喜得要死…</p><p>阿里云那边给出得预测时间是12-20工作日内能通过审核</p><p>我经过五一假期后，<strong>5月9日下午邮件和短信同时收到了备案结果，没有收到电话</strong></p><p>欣喜若狂地把工信部备案号加到网站页脚</p><h2 id="公安联网备案14天"><a href="#公安联网备案14天" class="headerlink" title="公安联网备案14天"></a>公安联网备案14天</h2><p>阿里云备案系统提示：搞完工信部的备案之后，30天内要完成<a href="http://www.beian.gov.cn/">公安联网备案</a></p><ol><li>联网备案登录注册账号</li><li>开办主体管理填写个人信息</li><li>新办网站申请填写网站信息，信息填写可以参照<a href="https://help.aliyun.com/knowledge_detail/36981.html">这里</a></li></ol><p>网站服务类型如实填写就是了，我填的<strong>交互式-博客个人空间</strong></p><p>然后继续等等等等，<strong>等到5月25日收到公安平台的短信</strong></p><p>没有面审和电话</p><p>把公安备案号弄在网站页脚就完事了</p><p><strong>4月28日到5月25日，我的域名备案也就全部结束了，算是很舒服的</strong></p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode用户片段或代码模板的使用</title>
    <link href="/2020/b7cd156ee619/"/>
    <url>/2020/b7cd156ee619/</url>
    
    <content type="html"><![CDATA[<p>使用vscode的时候，肯定想自定义一些代码模板来提高效率</p><span id="more"></span><h2 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h2><p><strong>这里举一个我码博客文章的一个Markdown模板</strong></p><p><img src="https://img.chanx.tech/i/2022/06/12/8xl1p_0.png" alt="image-20200530162713944"></p><p><u>打开配置文件：文件 - 首选项 - 用户片段  - markdown.json</u></p><p>可以看到一个默认的Example</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="hljs-comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="hljs-comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="hljs-comment">// same ids are connected.</span><br><span class="hljs-comment">// Example:</span><br><span class="hljs-comment">// &quot;Print to console&quot;: &#123;</span><br><span class="hljs-comment">// &quot;prefix&quot;: &quot;log&quot;,</span><br><span class="hljs-comment">// &quot;body&quot;: [</span><br><span class="hljs-comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span><br><span class="hljs-comment">// &quot;$2&quot;</span><br><span class="hljs-comment">// ],</span><br><span class="hljs-comment">// &quot;description&quot;: &quot;Log output to console&quot;</span><br>   <span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>那么我的模板是什么呢？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">   <span class="hljs-attr">&quot;Blog Template&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//用于区别的名称</span><br><span class="hljs-attr">&quot;prefix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//使用模板的命令   比如这里就是输入blog就能打开该模板</span><br><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-comment">//body里面就是模板每一行的内容</span><br>           <span class="hljs-string">&quot;---&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;title: &#x27;$TM_FILENAME_BASE$1&#x27;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//$TM_FILENAME_BASE自动获取不带扩展名的文件名</span><br>           <span class="hljs-string">&quot;date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//详细日期如2020-05-30 16:34:30</span><br>           <span class="hljs-string">&quot;# 永久链接&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# permalink: &#x27;/hello-world&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# 文章访问密码&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# keys: &#x27;123&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# 是否发布文章&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# publish: false&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# 置顶: 降序，可以按照 1, 2, 3, ... 来降低置顶文章的排列优先级&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;# sticky: 1&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;tags:&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;- &#x27;$2&#x27;&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;categories:&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;- &#x27;$TM_DIRECTORY$3&#x27;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//自动获取目录路径</span><br>           <span class="hljs-string">&quot;---&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-string">&quot;$0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blog file template.&quot;</span><span class="hljs-comment">//模板的描述信息</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其中有一些$或${}变量能让我们设置：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">TM_FILENAME 当前文件名<br>TM_FILENAME_BASE 当前文件名，不带扩展名<br>CURRENT_YEAR 当前年份<br>CURRENT_YEAR_SHORT 当前年份，最后两位数字<br>CURRENT_MONTH 当前月份数字形式，两位表示<br>CURRENT_MONTH_NAME 当前月份英文形式，如 <span class="hljs-keyword">July</span><br><span class="hljs-keyword"></span>CURRENT_MONTH_NAME_SHORT 当前月份英文缩写形式，如 <span class="hljs-keyword">Jul</span><br><span class="hljs-keyword"></span>CURRENT_DATE 当前日<br>CURRENT_DAY_NAME 当前星期，如 Monday<br>CURRENT_DAY_NAME_SHORT 当前星期缩写形式，如 Mon<br>CURRENT_HOUR 当前小时，<span class="hljs-number">24</span>小时格式，两位表示<br>CURRENT_MINUTE 当前分钟，两位表示<br>CURRENT_SECOND 当前秒，两位表示<br>TM_DIRECTORY 当前文件所属目录的绝对路径<br>TM_FILEPATH 当前文件的绝对路径<br></code></pre></td></tr></table></figure><p>更多的语法可以参考<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">vscode文档</a></p><p>你可能会好奇$1,$2,$0这些是什么东西</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> <span class="hljs-keyword">for</span> tab stops, <span class="hljs-variable">$0</span> <span class="hljs-keyword">for</span> the final cursor position, <span class="hljs-keyword">and</span> <span class="hljs-variable">$&#123;</span><span class="hljs-number">1</span><span class="hljs-symbol">:label</span>&#125;, <span class="hljs-variable">$&#123;</span><span class="hljs-number">2</span><span class="hljs-symbol">:another</span>&#125; <span class="hljs-keyword">for</span> placeholders. <span class="hljs-title class_">Placeholders</span> <span class="hljs-keyword">with</span> the same ids are connected.<br><br>他们是光标停止的地方，能让你快速切换至下一编辑点,<span class="hljs-variable">$0</span>是最后一个编辑点。<span class="hljs-variable">$&#123;</span><span class="hljs-number">1</span><span class="hljs-symbol">:label</span>&#125;能设置占位符，id相同的占位符会被连接起来。<br><br>举例：打开模板后你的光标将会自动跳到<span class="hljs-variable">$1</span>处，按下tab光标跳到<span class="hljs-variable">$2</span>处，最后跳到<span class="hljs-variable">$0</span>。<br></code></pre></td></tr></table></figure><h2 id="激活模板"><a href="#激活模板" class="headerlink" title="激活模板"></a>激活模板</h2><p>完成模板设置之后，你打开一个markdown文件，输入使用模板的命令如blog</p><p>发现居然没反应！</p><p><strong>你还需要打开vscode的配置文件setting.json</strong></p><p><img src="https://img.chanx.tech/i/2022/06/12/8ydz5_0.png" alt="image-20200530164742943"></p><p><strong>添加如下代码</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;[markdown]&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;editor.quickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="享受快乐"><a href="#享受快乐" class="headerlink" title="享受快乐"></a>享受快乐</h2><p>然后享受模板带来的快乐吧！</p><p><img src="https://img.chanx.tech/i/2022/06/12/8ykhx_0.png" alt="image-20200530164913044"></p><p><img src="https://img.chanx.tech/i/2022/06/12/8za6p_0.png" alt="image-20200530164906681"></p>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2020/2dd5d0f10ba2/"/>
    <url>/2020/2dd5d0f10ba2/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>互联网服务提供者 ISP（Internet Service Provider）：中国电信、中国移动、中国联通</p><p>互联网交换点 IXP （Internet eXchange Point）：允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组</p><p>边缘部分的端系统之间通信方式：</p><ol><li><p>客户-服务器方式（C&#x2F;S  -  Client &#x2F; Server）</p><blockquote><p>特殊的，浏览器-服务器方式（B&#x2F;S - Browser &#x2F; Server）</p></blockquote></li><li><p>对等方式（P2P - Peer to Peer）</p></li></ol><p>网络核心部分起特殊作用的是：<strong>路由器</strong>（实现分组交换的构件，任务是转发分组交换）</p><p><img src="https://img.chanx.tech/i/2022/06/12/7v0v0_0.png" alt="image-20200526193011677"></p><p>不使用分组交换的话，两端通信需要占用整一段链路进行传输（图中黑色部分有4段）</p><p><strong>使用分组交换后，在哪段链路上传送才占用这段链路的通信资源</strong></p><p><img src="https://img.chanx.tech/i/2022/06/12/7tzbk_0.png" alt="image-20200526193011677"></p>]]></content>
    
    
    <categories>
      
      <category>笔记note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>专业课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Taro-ui开发的坑</title>
    <link href="/2020/10d80b8de18c/"/>
    <url>/2020/10d80b8de18c/</url>
    
    <content type="html"><![CDATA[<p>记录使用<a href="https://taro-ui.jd.com/#/docs/introduction">Taro-UI</a>开发的一些问题</p><span id="more"></span><h2 id="搜索框问题"><a href="#搜索框问题" class="headerlink" title="搜索框问题"></a>搜索框问题</h2><p>补充：这个搜索框问题是事后很久才补的，修修改改不知道是不是正确做法了，但是就是这么个思路。</p><h3 id="使用-lt-input-gt-原生开发"><a href="#使用-lt-input-gt-原生开发" class="headerlink" title="使用&lt;input&gt;原生开发"></a>使用<code>&lt;input&gt;</code>原生开发</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>但是需求想把<strong>手机软键盘右下角换成搜索按钮</strong>，安卓上述方法可以实现，但是ios实现 ‘换行’ 变 ‘搜索’ </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;javascript:return true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>补充：ios真的是麻烦得飞起</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--&#x27;换行&#x27;变&#x27;前往&#x27;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;javascript:return true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--直接唤醒数字九键键盘--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;[0-9]*&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入数字&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--显示26键数字键盘，带有标点符号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;javascript:return true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入数字2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外<a href="https://www.cnblogs.com/ypppt/p/12846185.html">移动端H5开发软键盘的坑</a></p><h3 id="使用组件AtSearchBar"><a href="#使用组件AtSearchBar" class="headerlink" title="使用组件AtSearchBar"></a>使用组件<code>AtSearchBar</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">AtSearchBar</span></span><br><span class="hljs-tag">    <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.onChange.bind(this)&#125;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">onActionClick</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>套上了组件你以为可以了？不不不不</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Atform</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">AtSearchBar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.onChange.bind(this)&#125;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onActionClick</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span></span><br><span class="hljs-tag">    /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Atform</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样子软键盘上的搜索按钮就能起作用了</p><p>那ios软键盘还有一个完成按钮怎么触发呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Atform</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">AtSearchBar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.value&#125;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.onChange.bind(this)&#125;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onActionClick</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onBlur</span>=<span class="hljs-string">&#123;this.onActionClick.bind(this)&#125;</span></span><br><span class="hljs-tag">    /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Atform</span>&gt;</span><br></code></pre></td></tr></table></figure><p>采用失去焦点即搜索的办法即可</p><h2 id="置底输入框问题"><a href="#置底输入框问题" class="headerlink" title="置底输入框问题"></a>置底输入框问题</h2><p>需求是想要一个置底(<code>position:absolute;</code>)的输入框，但是在ios里面点击输入框后，软键盘会完全遮挡输入框。</p><p>经过分析，是因为在安卓手机打开软键盘后，页面高度和显示高度取的是<strong>屏幕高度 - 软键盘高度</strong>，即大约原来一半</p><p>但是在ios手机上，此时页面高度还是屏幕高度，但是显示的区域只有原来一半，这时候taro的壳会自动出现滚动条，而且我们无法进行手动滚动</p><p>（啊！我也不知道怎么描述&#x2F;不懂具体原因啊，反正就是不能实现手动滚动</p><p>于是我针对ios手机进行高度的特殊处理,将页面高度与显示区域进行同步，实现手动滚动</p><p>首先是判断手机类型，默认是安卓，防止意外情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> u = navigator.<span class="hljs-property">userAgent</span>;<br><span class="hljs-keyword">var</span> isAndroid = u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Android&#x27;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Adr&#x27;</span>) &gt; -<span class="hljs-number">1</span>; <span class="hljs-comment">//android终端</span><br><span class="hljs-keyword">var</span> isIOS = !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class="hljs-comment">//ios终端</span><br><span class="hljs-keyword">let</span> type;<br><span class="hljs-keyword">if</span>(!isAndroid &amp;&amp; isIOS)&#123;<br>    type = <span class="hljs-string">&quot;ios&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> type = <span class="hljs-string">&quot;android&quot;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<span class="hljs-attr">phoneType</span>:type&#125;);<br></code></pre></td></tr></table></figure><p>然后监听输入框的获得焦点事件，触发下列行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//ios高度特殊处理，-30px是为了页面样式</span><br>    <span class="hljs-keyword">if</span>(_this.<span class="hljs-property">state</span>.<span class="hljs-property">phoneType</span> == <span class="hljs-string">&quot;ios&quot;</span>)&#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;taro_router&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">minHeight</span> = <span class="hljs-string">&#x27;calc(50%-30px)&#x27;</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;taro_router&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>.<span class="hljs-property">maxHeight</span> = <span class="hljs-string">&#x27;calc(50%-30px)&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//输入框滚动置底，底部与页面底部对齐</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;item__footer&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">scrollIntoViewIfNeeded</span>(<span class="hljs-literal">false</span>);<br>&#125;, <span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p>记得失去焦点的时候进行恢复操作即可</p>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Taro</tag>
      
      <tag>H5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript高级程序设计</title>
    <link href="/2020/be12ba403621/"/>
    <url>/2020/be12ba403621/</url>
    
    <content type="html"><![CDATA[<p>阅读《Javascript高级程序设计》红宝书的笔记记录，参杂一些个人的思考和想法。</p><span id="more"></span><h2 id="Javascript简介"><a href="#Javascript简介" class="headerlink" title="Javascript简介"></a>Javascript简介</h2><h3 id="JS和ES的关系"><a href="#JS和ES的关系" class="headerlink" title="JS和ES的关系"></a>JS和ES的关系</h3><p>就Javascript和ECMAscript来说，一般我们认为是同一个东西。</p><p>实际上，一个完整的Javascript应该由 <strong>核心（ECMAscript）、文档对象模型（Document Object Model）、浏览器对象模型（Browser Object Model）</strong> 三部分组成</p><p>由此看来，Javascript的范围比ECMAscript大得多</p><blockquote><p>个人理解ECMAscript是语法部分</p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Typeof操作符"><a href="#Typeof操作符" class="headerlink" title="Typeof操作符"></a>Typeof操作符</h3><p>基于ECMAscript是松散类型的，因此需要有一种手段来检测给定变量的数据类型</p><p>typeof就是负责提供这方面信息的<strong>操作符</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;some string&quot;</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> message);<span class="hljs-comment">//&quot;string&quot;</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> (message));<span class="hljs-comment">//&quot;string&quot;</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">95</span>);<span class="hljs-comment">//&quot;number&quot;</span><br></code></pre></td></tr></table></figure><p>是的，没错，它是一个操作符而不是一个函数。尽管例子中的圆括号可以使用，但是它并不是必需的。</p><h3 id="Undefined类型和Null类型"><a href="#Undefined类型和Null类型" class="headerlink" title="Undefined类型和Null类型"></a>Undefined类型和Null类型</h3><p>Undefined类型只有一个值，即特殊的undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> message;<br><span class="hljs-title function_">alert</span>(message == <span class="hljs-literal">undefined</span>);<span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> message = <span class="hljs-literal">undefined</span>;<br><span class="hljs-title function_">alert</span>(message == <span class="hljs-literal">undefined</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>以上两段代码实际上是等价的，在声明变量时未对变量进行初始化，它就会被隐式初始化为undefined</p><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs smali">P33string字符串<br>p48加性操作符<br>p51相等操作符<br>p60with语句<br>p64js参数<br>（js无函数签名、不能重载、跟js数据类型也应该有关系）<br>p68类型问题是否可以引出深浅拷贝这个概念（复制）<br>没有块级作用域<br>变量提升=&gt;变量先声明<br>变量查询标识符从下往上找，故局部变量和外部变量同名，局部变量有效。另外还有局部变量与形参同名的情况<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>front-end</category>
      
      <category>笔记note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Element-ui开发的坑</title>
    <link href="/2020/d6bdfad5b3fb/"/>
    <url>/2020/d6bdfad5b3fb/</url>
    
    <content type="html"><![CDATA[<p>记录一些常见不正确使用导致的错误</p><span id="more"></span><h2 id="Vue-Element-Warn-Form-model-is-required-for-validate-to-work"><a href="#Vue-Element-Warn-Form-model-is-required-for-validate-to-work" class="headerlink" title="[Vue][Element Warn][Form]model is required for validate to work!"></a>[Vue][Element Warn][Form]model is required for validate to work!</h2><h3 id="1-属性绑定错误-常见"><a href="#1-属性绑定错误-常见" class="headerlink" title="1. 属性绑定错误(常见)"></a>1. 属性绑定错误(常见)</h3><p>确保使用<code>:model</code>，而不是<code>v-model</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">label-position</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;120px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-ref重复"><a href="#2-ref重复" class="headerlink" title="2. ref重复"></a>2. ref重复</h3><p>检查是否在其他el-form中使用了相同的ref名，多个el-form组件ref命名要独立</p><h2 id="el-upload多选文件时触发多次上传钩子"><a href="#el-upload多选文件时触发多次上传钩子" class="headerlink" title="el-upload多选文件时触发多次上传钩子"></a>el-upload多选文件时触发多次上传钩子</h2><ol><li><p>上传钩子不做实际上传操作，另外设置上传按钮触发正式上传</p></li><li><p>对上传钩子进行聚合，多次触发合并一次。可见<a href="./%E5%89%8D%E7%AB%AF%E5%87%BD%E6%95%B0%E6%88%96%E8%AF%B7%E6%B1%82%E7%9A%84%E8%81%9A%E5%90%88.md">前端函数或请求的聚合</a>的思路</p></li></ol><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span>&gt;<br>&lt;templete&gt;<br>****<br>&lt;/templete&gt;<br>&lt;/el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span>&gt;<br>自定义列时要加templete<br><br>&lt;el-upload&gt;的隐藏做法：官方思路和github两个实现方法<br><br>多选表格的状态保留：单页和多页<br><br>vue-quill-editor空格问题white-space<br><br><span class="hljs-keyword">template</span> <span class="hljs-keyword">or</span> render <span class="hljs-keyword">function</span> <span class="hljs-keyword">not</span> defined 重新run dev<br><br>深浅拷贝<br><br>动态路由<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>Element</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从C到C++</title>
    <link href="/2020/a6abb4c98faf/"/>
    <url>/2020/a6abb4c98faf/</url>
    
    <content type="html"><![CDATA[<p><strong>本笔记根据《C&#x2F;C++语言程序设计》龚尚福版以及个人理解总结修改，不能保证内容完全准确，仅供参考。</strong></p><p>第一次修改（2019年8月4日）：C++对于C的一般扩充</p><p>第二次修改（2019年8月5日）：C++中的函数</p><p>第三次修改（咕咕咕）：C++的输入与输出流</p><span id="more"></span><hr><p>[前言]C++从C发展而来，它继承了C语言的优点，并引入了面向对象的概念，同时也增加了一些非面向对象的新特性，这些新特性使得C+ +比C更简洁、更安全。</p><h2 id="一、C-对于C的一般扩充"><a href="#一、C-对于C的一般扩充" class="headerlink" title="一、C++对于C的一般扩充"></a>一、C++对于C的一般扩充</h2><p>[指南]主要介绍了C++ 对C的非面向对象特性的扩展，包括新增的关键字、注释、类型转换、灵活的变量声明、const、struct 、作用域分辨符、 C++ 的动态内存分配、引用、主函数、函数定义、内置函数、缺省参数值、重载函数、 C++的输入输出流等。</p><h3 id="1-新增的关键字"><a href="#1-新增的关键字" class="headerlink" title="1.新增的关键字"></a>1.新增的关键字</h3><p>C++在C语言的基础上增加了许多关键字  </p><blockquote><p>下面是一些常用的关键字：<br>asm  catch  class  delete  friend  inline  new  operator private  protected  public  template  virtual  try  using</p></blockquote><h3 id="2-注释方式"><a href="#2-注释方式" class="headerlink" title="2. 注释方式"></a>2. 注释方式</h3><p>C语言使用&#x2F;* 和 *&#x2F;作为注释分界的符号，而C++ 除了保留这种原有的注释模式，还新加了单行注释符号 &#x2F;&#x2F;</p><blockquote><p>对于这个问题我也感觉到十分诧异，在平时注释的时候并没有发现C不支持单行注释。经过百度后，发现C99才支持单行注释。所以之前的TC是不支持单行注释的。完美解释了我实验课用TC注释一直出错（滑稽）</p></blockquote><h3 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3. 类型转换"></a>3. 类型转换</h3><p>C++ 支持两种不同的类型转换方式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> n=(<span class="hljs-type">long</span>)i; <span class="hljs-comment">//C的类型风格</span><br><span class="hljs-type">long</span> m=<span class="hljs-built_in">long</span>(i); <span class="hljs-comment">//C++的类型风格</span><br></code></pre></td></tr></table></figure><p>C++的这种新风格更像是调用了函数，可读性更好</p><h3 id="4-灵活的变量声明"><a href="#4-灵活的变量声明" class="headerlink" title="4.灵活的变量声明"></a>4.灵活的变量声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;100分！&quot;</span>);<span class="hljs-comment">//不使用变量</span><br>    <span class="hljs-type">int</span> score;<span class="hljs-comment">//使用变量</span><br>    score = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;是%d分！&quot;</span>,score);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码会因为score在第一个printf后报错</p><p>问题根源：编译器问题——C89和C99</p><p>C89规定，在任何执行语句之前，在块的开头声明所有局部变量。</p><p>在C99以及C++中则没有这个限制，即在首次使用之前，可在块的任何位置都可以声明变量。</p><blockquote><p>我在学习C的过程中接触的应该是C99标准。看到这里我感觉到了C99的强大…还有我是不是要换本书看。讲得太多我好像有点混乱（枯了）</p></blockquote><h3 id="5-const"><a href="#5-const" class="headerlink" title="5.const"></a>5.const</h3><h4 id="1-const定义常量"><a href="#1-const定义常量" class="headerlink" title="1. const定义常量"></a>1. const定义常量</h4><p>使用const定义常量可以避免define引起的歧义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> T1 a+a</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> T2 T1-T1</span><br>    cout&lt;&lt;<span class="hljs-string">&quot;T2 is &quot;</span>&lt;&lt;T2&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的是2而不是0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">const</span> T1 a+a<br>    <span class="hljs-type">const</span> T2 T1-T1<br>    cout&lt;&lt;<span class="hljs-string">&quot;T2 is &quot;</span>&lt;&lt;T2&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为0</p><h4 id="2-const-修饰指针"><a href="#2-const-修饰指针" class="headerlink" title="2. const 修饰指针"></a>2. const 修饰指针</h4><p><strong>首先存在 int b&#x3D;500;</strong></p><p>a是一个指向常量的普通指针变量，不是常指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *a=&amp;b;<br><span class="hljs-type">int</span> <span class="hljs-type">const</span> *a=&amp;b;<br><br><span class="hljs-comment">//所以a的值是可以改变的</span><br><span class="hljs-type">int</span> c=<span class="hljs-number">3</span>;    <span class="hljs-comment">//√</span><br>a=&amp;c;<br><br><span class="hljs-comment">//但是对于a指向的内容不能改变</span><br>*a=<span class="hljs-number">3</span>;    <span class="hljs-comment">//×</span><br></code></pre></td></tr></table></figure><p>指针本身是常量（常指针）而指针所指向的内容不是常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>* <span class="hljs-type">const</span> a=&amp;b;<br><br><span class="hljs-comment">//不能对指针本身进行更改操作</span><br>a++;    <span class="hljs-comment">//×</span><br><br><span class="hljs-comment">//它指向的数据可以改变</span><br>*a=<span class="hljs-number">3</span>；   <span class="hljs-comment">//√</span><br></code></pre></td></tr></table></figure><p>指针本身和它指向的内容都是常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> a=&amp;b;<br><br><span class="hljs-comment">//指针本身和指向内容都不能修改</span><br>a++;    <span class="hljs-comment">//×</span><br>*a=<span class="hljs-number">3</span>;   <span class="hljs-comment">//×</span><br></code></pre></td></tr></table></figure><h4 id="3-const-在函数中的应用"><a href="#3-const-在函数中的应用" class="headerlink" title="3. const 在函数中的应用"></a>3. const 在函数中的应用</h4><p>const 还常用于限定函数的参数和返回值。函数参数如果使用const 声明，则在该函数中不能修改参数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    x=x*x;  <span class="hljs-comment">//非法</span><br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果函数返回基本类型，则用const声明返回值并没有特别的意义，但是如果函数返回一个指针或引用（引用的概念稍后在第九节会讲），则使用const 声明返回值表示调用函数时不能用返回值来改变返回值所指向或引用的变量。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> *<span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br>    ++x;<br>    <span class="hljs-keyword">return</span> &amp;x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> y;<br>    y=*<span class="hljs-built_in">func</span>();  <span class="hljs-comment">//合法：将值x传给y</span><br>    *<span class="hljs-built_in">func</span>()=<span class="hljs-number">2</span>;  <span class="hljs-comment">//非法：不能改变常量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，函数func（）的返回值使用了const声明，因此调用func() 函数时不能通过函数返回值来改变它所指向的变量x的值。</p><h3 id="6-struct"><a href="#6-struct" class="headerlink" title="6. struct"></a>6. struct</h3><p>在C++中，struct后的标识符可直接作为结构体类型名使用，所以定义变量比在C中更加直观。代码如下：</p><p>C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> <span class="hljs-title">p</span>;</span><br></code></pre></td></tr></table></figure><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;;<br>point p;<br></code></pre></td></tr></table></figure><p>对于union，也可以照此使用。以上两种方法在C++都适用。  </p><blockquote><p>不过我一直在用typedof的写法，现在看起来跟C++的写法差不多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">typedof <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;point;<br>point p;<br></code></pre></td></tr></table></figure></blockquote><h3 id="7-作用域分辨运算符"><a href="#7-作用域分辨运算符" class="headerlink" title="7. 作用域分辨运算符::"></a>7. 作用域分辨运算符::</h3><p>作用域分辨预算符“::”用于访问当前作用域中被隐藏的数据项。如果有两个重名的变量，一个是全局的，一个是局部的，那么局部变量作用域内具有优先权，同名的全局变量被隐藏无法被访问到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;   <span class="hljs-comment">//全局变量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a;  <span class="hljs-comment">//局部变量</span><br>    a=<span class="hljs-number">25</span>;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果为25，说明了局部变量的较高优先权</p><p>如果希望在局部变量作用域内使用同名的全局变量，则可以在该变量前加上“::”，此时“::a”代表全局变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> a;   <span class="hljs-comment">//全局变量</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a;  <span class="hljs-comment">//局部变量</span><br>    a=<span class="hljs-number">25</span>;<br>    ::a=<span class="hljs-number">10</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;local is &quot;</span>&lt;&lt;a&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;global is &quot;</span>&lt;&lt;::a&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序运行结果为local is 25&#x2F;global is 10</p><p>需要注意的是：作用域分辨符只能用来访问全局变量，不能用来访问一个在语句块外声明的同名局部变量。例如，下面代码是错误的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a;  <span class="hljs-comment">//语句块外局部变量</span><br>    &#123;<br>        <span class="hljs-type">int</span> a=<span class="hljs-number">25</span>;   <span class="hljs-comment">//语句块内局部变量</span><br>        ::a=<span class="hljs-number">30</span>;     <span class="hljs-comment">//非法</span><br>        ...<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-C-的动态内存分配"><a href="#8-C-的动态内存分配" class="headerlink" title="8. C++的动态内存分配"></a>8. C++的动态内存分配</h3><p>在C语言中，动态分配内存是通过调用malloc()和free()来实现的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span>     <span class="hljs-comment">//这里常用stdlib.h 它包含了malloc.h</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *p;<br>    p=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    *p=<span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*p);<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++进行动态内存分配使用的是<strong>new</strong>和<strong>delete</strong></p><p>运算符new用于内存分配的使用形式为：  </p><p>&#x3D;&#x3D;<strong>指针变量 &#x3D; new &lt;数据类型&gt;[&lt;整形表达式&gt;];</strong>&#x3D;&#x3D;</p><p>其中&lt;数据类型&gt;可以是基本数据类型、结构等，它表示要分配与&lt;数据类型&gt;相匹配的内存空间；&lt;整形表达式&gt;表示要分配内存单元的个数，默认值为1，可以省略。new运算符返回分配内存单元的起始地址，因此需要把该返回值赋值给一个指针变量。如果当前内存没有足够的空间可以分配，则new运算符返回NULL，并抛出一个运行异常。所以在进行动态内存分配的时候需要检验分配是否成功。</p><p>运算符delete用于释放new分配的存储空间，它的使用形式为：</p><p>&#x3D;&#x3D;<strong>delete &lt;指针变量&gt;;</strong>&#x3D;&#x3D;</p><p>以下是C++中使用新方法进行动态内存分配的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>; <span class="hljs-comment">//为指针p分配空间</span><br>    *p=<span class="hljs-number">10</span>;<br>    cout&lt;&lt;*p&lt;&lt;endl;<br>    <span class="hljs-keyword">delete</span> p;   <span class="hljs-comment">//为指针p释放空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到这种新方法中分配内存时不需要显式地计算int所占用地存储空间大小。</p><p><strong>new和delete的一些说明：</strong></p><ol><li>使用new可以为数组分配存储空间，但是需要在类型名后缀上数组的大小。为多维数组分配空间时需要给出每一维的大小，其中第一维的值可以是任何合法的整型表达式。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><br><span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[i][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br></code></pre></td></tr></table></figure><ol start="2"><li>new可以在为简单变量分配内存的同时进行初始化，但是不能对数组进行初始化。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> *p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">99</span>);<br><span class="hljs-comment">//分配了一个整形内存空间并赋值99</span><br></code></pre></td></tr></table></figure><p>3.释放动态分配的数组时可用如下格式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> []p;<br></code></pre></td></tr></table></figure><p>4.建议在使用new分配动态内存时进行检查，避免分配失败引起的程序错误。</p><h3 id="9-引用"><a href="#9-引用" class="headerlink" title="9. 引用"></a>9. 引用</h3><p>引用的定义格式为</p><p>&#x3D;&#x3D;<strong>数据类型    &amp;变量名 &#x3D; 初始值</strong>&#x3D;&#x3D;</p><p>引用是一种能够自动间接引用的<strong>指针</strong>。自动间接引用就是不必使用间接引用运算符“*”就可以得到一个引用值，即指针所指向变量的值。++<strong>换句话说，引用就是某一变量的一个别名，对引用的操作就是对变量本身的操作。</strong>++</p><p>使用规则：</p><ol><li>定义引用时必须立即初始化</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> &amp;j;     <span class="hljs-comment">//错误，没有立即初始化</span><br>j=i;<br></code></pre></td></tr></table></figure><ol start="2"><li>引用不可重新赋值</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> i=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> k=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;j=i;<br>j=&amp;k;       <span class="hljs-comment">//错误，重新赋值</span><br></code></pre></td></tr></table></figure><p>3.引用不同于普通变量。以下声明是非法的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> &amp;b[<span class="hljs-number">3</span>];  <span class="hljs-comment">//不能建立引用数组</span><br><span class="hljs-type">int</span> &amp;*p;    <span class="hljs-comment">//不能建立指向引用的指针</span><br><span class="hljs-type">int</span> &amp;&amp;r;    <span class="hljs-comment">//不能建立指向引用的引用</span><br></code></pre></td></tr></table></figure><p>4.当使用&amp;运算符取一个引用的地址时，其值为所引用变量的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> num=<span class="hljs-number">50</span>;<br><span class="hljs-type">int</span> &amp;ref=num;<br><span class="hljs-type">int</span> *p=&amp;ref;<br><span class="hljs-comment">//p中保存的是变量num的地址</span><br></code></pre></td></tr></table></figure><p>引用作为一般变量几乎没什么意义，最大用处是作为函数形参。</p><p>通过两个例子比较能比较清楚地理解引用的意义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这种方法是地址传递</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *m,<span class="hljs-type">int</span> *n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    t=*m;<br>    *m=*n;<br>    *n=t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>,b=<span class="hljs-number">10</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;b= &quot;</span>&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-built_in">swap</span>(&amp;a,&amp;b);<br>    cout&lt;&lt;<span class="hljs-string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;b= &quot;</span>&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//这种方法是通过引用传递</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;m,<span class="hljs-type">int</span> &amp;n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    t=m;<br>    m=n;<br>    n=t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>,b=<span class="hljs-number">10</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;b= &quot;</span>&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-built_in">swap</span>(a,b);<br>    cout&lt;&lt;<span class="hljs-string">&quot;a= &quot;</span>&lt;&lt;a&lt;&lt;<span class="hljs-string">&quot;b= &quot;</span>&lt;&lt;b&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>两种方法是等效的，区别就在引用不需要间接引用符“*”。</p><hr><h2 id="二、C-中的函数"><a href="#二、C-中的函数" class="headerlink" title="二、C++中的函数"></a>二、C++中的函数</h2><h3 id="1-主函数"><a href="#1-主函数" class="headerlink" title="1. 主函数"></a>1. 主函数</h3><p>C中对于main()函数的格式并无特殊规定，因为C通常不关心返回何种状态给操作系统。</p><p>然而，C++要求main()函数匹配下面两种原型之一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><span class="hljs-comment">//无参数，无返回类型</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span> <span class="hljs-comment">//带参数，有返回类型，参数可省略</span></span><br></code></pre></td></tr></table></figure><p>第二种写法中，形参argc是命令行总的参数个数，argv的元素个数即为argc，其中第0个为可执行文件名，后面是执行所带的参数。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">例如，test.exe在命令行执行：<br>C:\&gt;test <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.c</span> <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.c</span><br>则argc=<span class="hljs-number">3</span>    argv<span class="hljs-selector-attr">[0]</span>=<span class="hljs-string">&quot;test&quot;</span>  argv<span class="hljs-selector-attr">[1]</span>=<span class="hljs-string">&quot;a.c&quot;</span>  argv<span class="hljs-selector-attr">[2]</span>=<span class="hljs-string">&quot;b.c&quot;</span> <br></code></pre></td></tr></table></figure><p>如果main()函数前不加返回类型则等价于int main()</p><h3 id="2-函数定义"><a href="#2-函数定义" class="headerlink" title="2. 函数定义"></a>2. 函数定义</h3><p>C++函数定义中的参数说明必须放在函数名后面的括号内，不可将函数的参数说明放在函数说明部分与函数体之间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(a)</span><br><span class="hljs-type">int</span> a;<br>&#123;   &#125;<br></code></pre></td></tr></table></figure><p>但是在C中，这种方法是允许的。</p><p><strong>学C的时候完全不知道有这种写法，个人觉得这种写法十分毒瘤，切勿使用。</strong></p><h3 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="3. 内置函数"></a>3. 内置函数</h3><p>函数调用导致了一定数量的额外开销，如参数入栈出栈等。当函数定义由inline开头时，表明此函数为内置函数。编译时，可使用函数体中的代码来替代函数调用表达式，从而完成与函数调用相同的功能。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：（1）内置函数必须在它被调用之前被定义。<br>（2）若内置函数较长且调用频繁，编译后程序会加长许多。所以通常只有较短的函数定义为内置函数。</p><blockquote><p>这个内置函数感觉有点像define。函数体太长的话，每个调用的地方都会被替换成一个函数体，相当于多了一段一模一样的代码…</p></blockquote><h3 id="4-缺省函数值"><a href="#4-缺省函数值" class="headerlink" title="4. 缺省函数值"></a>4. 缺省函数值</h3><p>C++对于C的改进之一就是可以为函数定义缺省参数值。</p><p>当函数调用时，编译器按从左向右的顺序将实参和形参结合，若未指定足够的实参，则编译器按顺序用函数原型的缺省值来补足缺少的实参。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> x=<span class="hljs-number">5</span>,<span class="hljs-type">int</span> y=<span class="hljs-number">10</span>)</span></span>;<br><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   <span class="hljs-comment">//x=1,y=2</span><br><span class="hljs-built_in">fun</span>(<span class="hljs-number">1</span>);     <span class="hljs-comment">//x=1,y=10</span><br><span class="hljs-built_in">fun</span>();      <span class="hljs-comment">//x=5,y=10</span><br><span class="hljs-built_in">fun</span>(,<span class="hljs-number">5</span>)     <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><p>最后一个调用错误的原因：一个函数可以有多个缺省值，但是缺省参数值必须连续放在后面。不允许出现某个参数值省略后，后一个参数有指定值。</p><blockquote><p>如果缺省值不是连续放在后面，按照从左至右结合可能会出现混乱。但是我有疑惑是，如果我缺省的时候把逗号补全不就让实参形参准确结合了吗？这样fun(,5)就可以算是一种正确的做法，是否还有另外的因素使得不能这样做？</p></blockquote><h3 id="5-重载函数"><a href="#5-重载函数" class="headerlink" title="5. 重载函数"></a>5. 重载函数</h3><p>在C语言中，函数名必须是唯一的。也就是说，不允许出现同名的函数。如果我要编写一个求不同数据类型的三次方函数，我需要编写三个不同名的函数，同时要在名字标注数据类型的特点。调用时，尽管三个函数的功能相同，我还是需要<strong>手动</strong>为相应的数据类型调用相应的函数。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">Icube</span>(<span class="hljs-type">int</span> i);       <span class="hljs-comment">//求int的三次方</span><br><span class="hljs-built_in">Fcube</span>(<span class="hljs-type">float</span> i);     <span class="hljs-comment">//求float的三次方</span><br><span class="hljs-built_in">Dcube</span>(<span class="hljs-type">double</span> i);    <span class="hljs-comment">//求double的三次方</span><br></code></pre></td></tr></table></figure><p>而在C++中，我们可以重载函数。只要函数参数类型不同或者参数的个数不同，两个或两个以上的函数就可以使用相同的函数名。&#x3D;&#x3D;一般而言，重载函数应该实现相同的功能。&#x3D;&#x3D;所以这能干什么呢？我们在算不同数据类型的三次方时可以调用同一个名字的函数cube()，而它会<strong>自动</strong>为相应的数据类型调用相应的重载函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cube</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<span class="hljs-keyword">return</span> i*i*i;&#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">cube</span><span class="hljs-params">(<span class="hljs-type">float</span> f)</span></span>&#123;<span class="hljs-keyword">return</span> f*f*f;&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cube</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span></span>&#123;<span class="hljs-keyword">return</span> d*d*d;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;<br>    <span class="hljs-type">float</span> f=<span class="hljs-number">3.4</span>;<br>    <span class="hljs-type">double</span> d=<span class="hljs-number">5.678</span>;<br>    cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;<span class="hljs-built_in">cube</span>(i)&lt;&lt;endl;<br>    cout&lt;&lt;f&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;f&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;f&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;<span class="hljs-built_in">cube</span>(f)&lt;&lt;endl;<br>    cout&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;d&lt;&lt;<span class="hljs-string">&quot;=&quot;</span>&lt;&lt;<span class="hljs-built_in">cube</span>(d)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：重载函数需在参数个数或类型上有所不同，就算返回类型不同，编译程序也不知道调用哪一个重载函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">这种重载函数是错误的。<br>int <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int x,int y)</span></span>;<br>double <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int x,int y)</span></span><br></code></pre></td></tr></table></figure><p>特例：同参数、同参数表的const和非const成员函数可以重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myclass::fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myclass::fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><p>关于成员函数会在类和对象中学到。</p><h2 id="三-C-的输入与输出流"><a href="#三-C-的输入与输出流" class="headerlink" title="三. C++的输入与输出流"></a>三. C++的输入与输出流</h2><h3 id="1-C-的流式结构"><a href="#1-C-的流式结构" class="headerlink" title="1. C++的流式结构"></a>1. C++的流式结构</h3><h3 id="2-格式化I-x2F-O"><a href="#2-格式化I-x2F-O" class="headerlink" title="2. 格式化I&#x2F;O"></a>2. 格式化I&#x2F;O</h3>]]></content>
    
    
    <categories>
      
      <category>其他other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[Maven] Maven基本知识</title>
    <link href="/2020/e05675e2f2ab/"/>
    <url>/2020/e05675e2f2ab/</url>
    
    <content type="html"><![CDATA[<p><strong>Maven-tomcat插件好像跑不了9…  直接部署tomcat9启动即可</strong></p><p>本文记录Maven的基本概念和常用指令</p><span id="more"></span><h2 id="Maven仓库概念"><a href="#Maven仓库概念" class="headerlink" title="Maven仓库概念"></a>Maven仓库概念</h2><p>就是能自动帮你引入jar包，减少不必要的操作</p><p>其中仓库有<strong>本地仓库，远程仓库，中央仓库</strong></p><p>本地仓库：本地的jar包（本机）</p><p>远程仓库：本地上传的或者联网缓存的，私服…（内网共用 <em>实际上并不一定是内网只是为了方便理解</em>）</p><p>中央仓库：集中存储的资源站（外网共用）</p><p>若实际开发中maven无法从三个仓库中找到相应jar包的坐标，则报错</p><h2 id="Maven工程"><a href="#Maven工程" class="headerlink" title="Maven工程"></a>Maven工程</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">src<span class="hljs-regexp">/main/</span>java 核心代码<br>src<span class="hljs-regexp">/main/</span>resources  配置文件<br>src<span class="hljs-regexp">/test/</span>java 测试代码<br>src<span class="hljs-regexp">/test/</span>resources  测试配置<br>src<span class="hljs-regexp">/main/</span>webapp 页面资源如js,css,image<br></code></pre></td></tr></table></figure><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">compile 编译命令<br>将src/main/java下文件编译为class文件输出到target目录下<br><br>test  测试命令<br><br>clean 删除target文件夹<br><br>package 默认打包成war包放置于target<br><br>install 将maven编译打包放于本地仓库<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端back-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java的MOOC编程练习</title>
    <link href="/2019/1073c1e06161/"/>
    <url>/2019/1073c1e06161/</url>
    
    <content type="html"><![CDATA[<blockquote><p>课程地址：<a href="https://www.icourse163.org/course/ZJU-1001542001/">点击传送</a><br>没有 Submit 给系统判题，所以代码不能保证完全正确。</p></blockquote><span id="more"></span><h2 id="第一周：类与对象"><a href="#第一周：类与对象" class="headerlink" title="第一周：类与对象"></a><strong>第一周：类与对象</strong></h2><p><strong>题目：分数</strong></p><p>设计一个表示分数的类Fraction。这个类用两个int类型的变量分别表示分子和分母。</p><p>这个类的构造函数是：</p><p>Fraction(int a, int b)</p><blockquote><p>构造一个a&#x2F;b的分数。</p></blockquote><p><strong>这个类要提供以下的功能：</strong></p><p>double toDouble();</p><blockquote><p>将分数转换为double</p></blockquote><p>Fraction plus(Fraction r);</p><blockquote><p>将自己的分数和r的分数相加，产生一个新的Fraction的对象。注意小学四年级学过两个分数如何相加的哈。</p></blockquote><p>Fraction multiply(Fraction r);</p><blockquote><p>将自己的分数和r的分数相乘，产生一个新的Fraction的对象。</p></blockquote><p>void print();</p><blockquote><p>将自己以“分子&#x2F;分母”的形式输出到标准输出，并带有回车换行。如果分数是1&#x2F;1，应该输出1。当分子大于分母时，不需要提出整数部分，即31&#x2F;30是一个正确的输出。</p></blockquote><p>&#x3D;&#x3D;注意，在创建和做完运算后应该化简分数为最简形式。如2&#x2F;4应该被化简为1&#x2F;2&#x3D;&#x3D;。</p><p>你写的类要和以下的代码放在一起，并请勿修改这个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">Fraction</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fraction</span>(in.nextInt(), in.nextInt());<br><span class="hljs-type">Fraction</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fraction</span>(in.nextInt(),in.nextInt());<br>a.print();<br>b.print();<br>a.plus(b).print();<br>a.multiply(b).plus(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fraction</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)).print();<br>a.print();<br>b.print();<br>in.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，你的类的定义应该这样开始：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Fraction</span> &#123;<br></code></pre></td></tr></table></figure><p>也就是说，在你的类的class前面不要有public。</p><p><strong>输入格式:</strong></p><p>程序运行时会得到四个数字，分别构成两个分数，依次是分子和分母。</p><p><strong>输出格式：</strong></p><p>输出一些算式。这些输入和输出都是由Main类的代码完成的，你的代码不要做输入和输出。</p><p><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">1</span>/<span class="hljs-number">3</span><br><span class="hljs-attribute">5</span>/<span class="hljs-number">6</span><br><span class="hljs-attribute">1</span><br><span class="hljs-attribute">1</span>/<span class="hljs-number">2</span><br><span class="hljs-attribute">1</span>/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fraction</span> <br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> b;<br>Fraction(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)<br>&#123;<br><span class="hljs-built_in">this</span>.a=a;<br><span class="hljs-built_in">this</span>.b=b;<br>toeasy();<br>&#125;<br><span class="hljs-comment">//构造一个a/b的分数。</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">toeasy</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.a;<br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.b;<br><span class="hljs-type">int</span> t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(d&gt;<span class="hljs-number">0</span>)<br>&#123;<br>t=c%d;<br>c=d;<br>d=t;<br>&#125;<br><span class="hljs-built_in">this</span>.a = <span class="hljs-built_in">this</span>.a/c;<br><span class="hljs-built_in">this</span>.b = <span class="hljs-built_in">this</span>.b/c;<br>&#125;<br><span class="hljs-comment">//化简</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">toDouble</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)a/(<span class="hljs-type">double</span>)b;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">//将分数转换为double</span><br><br>Fraction <span class="hljs-title function_">plus</span><span class="hljs-params">(Fraction r)</span><br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.a*r.b+r.a*<span class="hljs-built_in">this</span>.b;<br><span class="hljs-type">int</span> <span class="hljs-variable">down</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.b*r.b;<br><span class="hljs-type">Fraction</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fraction</span>(up,down);<br>ans.toeasy();<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">//将自己的分数和r的分数相加，产生一个新的Fraction的对象。注意小学四年级学过两个分数如何相加的哈。</span><br><br>Fraction <span class="hljs-title function_">multiply</span><span class="hljs-params">(Fraction r)</span><br>&#123;<br><span class="hljs-type">Fraction</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fraction</span>(<span class="hljs-built_in">this</span>.a*r.a,<span class="hljs-built_in">this</span>.b*r.b);<br>ans.toeasy();<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">//将自己的分数和r的分数相乘，产生一个新的Fraction的对象。</span><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.a==<span class="hljs-built_in">this</span>.b)<br>System.out.println(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.a==<span class="hljs-number">0</span>)<br>System.out.println(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span> System.out.println(<span class="hljs-built_in">this</span>.a+<span class="hljs-string">&quot;/&quot;</span>+<span class="hljs-built_in">this</span>.b);<br>&#125;<br><span class="hljs-comment">// 将自己以“分子/分母”的形式输出到标准输出，并带有回车换行。如果分数是1/1，应该输出1。当分子大于分母时，不需要提出整数部分，即31/30是一个正确的输出。</span><br><span class="hljs-comment">//注意，在创建和做完运算后应该化简分数为最简形式。如2/4应该被化简为1/2。</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="第二周：对象交互"><a href="#第二周：对象交互" class="headerlink" title="第二周：对象交互"></a><strong>第二周：对象交互</strong></h2><p><strong>题目：有秒计时的数字时钟</strong></p><p>这一周的编程题是需要你在课程所给的时钟程序的基础上修改而成。但是我们并不直接给你时钟程序的代码，请根据视频自己输入时钟程序的 Display 和 Clock 类的代码，然后来做这个题目。</p><p>我们需要给时钟程序加上一个表示秒的 Display，然后为 Clock 增加以下 public 的成员函数：</p><p>public Clock(int hour, int minute, int second);</p><blockquote><pre><code class="hljs">用 hour, minute 和 second 初始化时间。</code></pre></blockquote><p>public void tick();</p><blockquote><pre><code class="hljs">“嘀嗒” 一下，时间走 1 秒。</code></pre></blockquote><p>public String toString();</p><blockquote><p> 返回一个 String 的值，以 “hh:mm:ss“的形式表示当前时间。这里每个数值都占据两位，不足两位时补 0。如 “00:01:22”。注意其中的冒号是西文的，不是中文的。</p></blockquote><p>提示：String.format () 可以用和 printf 一样的方式来格式化一个字符串。</p><p>另外写一个 Main 类，它的 main 函数为下面的样子，注意，必须原封不动地作为 Main 的 main 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br>    <span class="hljs-type">Clock</span> <span class="hljs-variable">clock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clock</span>(in.nextInt(), in.nextInt(), in.nextInt());<br>    clock.tick();<br>    System.out.println(clock);<br>    in.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>注意！在提交的时候，把 Main、Clock 和 Display 三个类的代码合并在一起，其中 Main 类是 public 的，而 Clock 和 Display 类是没有修饰符的。另外，千万注意第一行不能有 package 语句。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br>    <span class="hljs-type">Clock</span> <span class="hljs-variable">clock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clock</span>(in.nextInt(), in.nextInt(), in.nextInt());<br>    clock.tick();<br>    System.out.println(clock);<br>    in.close();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Display</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>Display(<span class="hljs-type">int</span> limit)&#123;<br><span class="hljs-built_in">this</span>.limit = limit;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getvalue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">increase</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.value++;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.value == limit) &#123;<br><span class="hljs-built_in">this</span>.value = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setvalue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-built_in">this</span>.value =  value;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>&#123;<br><span class="hljs-type">Display</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Display</span>(<span class="hljs-number">24</span>);<br><span class="hljs-type">Display</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Display</span>(<span class="hljs-number">60</span>);<br><span class="hljs-type">Display</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Display</span>(<span class="hljs-number">60</span>);<br>Clock(<span class="hljs-type">int</span> hour,<span class="hljs-type">int</span> minute,<span class="hljs-type">int</span> second)&#123;<br>h.setvalue(hour);<br>m.setvalue(minute);<br>s.setvalue(second);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tick</span><span class="hljs-params">()</span> &#123;<br>s.increase();<br><span class="hljs-keyword">if</span>(s.getvalue()==<span class="hljs-number">0</span>)&#123;<br>m.increase();<br><span class="hljs-keyword">if</span>(m.getvalue()==<span class="hljs-number">0</span>)<br>h.increase();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>, h.getvalue(),m.getvalue(),s.getvalue());<br><span class="hljs-keyword">return</span> str;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="第三周：对象容器"><a href="#第三周：对象容器" class="headerlink" title="第三周：对象容器"></a><strong>第三周：对象容器</strong></h2><p><strong>题目：查找里程</strong></p><p><strong>输入格式:</strong></p><p>首先，你会读到若干个城市的名字。每个名字都只是一个英文单词，中间不含空格或其他符号。当读到名字为 “###”（三个 #号）时，表示城市名字输入结束，## 并不是一个城市的名字。如果记读到的城市名字的数量为 n。</p><p>然后，你会读到 nxn 的一个整数矩阵。第一行的每一个数字，表示上述城市名单中第一个城市依次到另一个城市之间的里程。表中同一个城市之间的里程为 0。</p><p>最后，你会读到两个城市的名字。</p><p><strong>输出格式：</strong></p><p>输出这两个城市之间的距离。</p><p><strong>输入样例</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hagzou</span>HugzouJigxng    ###<br><span class="hljs-attribute">0</span><span class="hljs-number">1108</span><span class="hljs-number">708</span><br><span class="hljs-attribute">1108</span><span class="hljs-number">0</span><span class="hljs-number">994</span><br><span class="hljs-attribute">708</span><span class="hljs-number">994</span><span class="hljs-number">0</span><br><span class="hljs-attribute">Hagzou</span>    Jigxng<br></code></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">708<br></code></pre></td></tr></table></figure><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>ArrayList&lt;String&gt; city = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//顺序容器存城市的名称</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> in.next();<br><span class="hljs-keyword">if</span>(temp.equals(<span class="hljs-string">&quot;###&quot;</span>))<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> city.add(temp);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> city.size();<br><span class="hljs-comment">//嵌套哈希表存二维数据表</span><br>HashMap&lt;String,HashMap&lt;String,Integer&gt;&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> city.get(i);<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;size;j++)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">distance</span>  <span class="hljs-operator">=</span> in.nextInt();<br><span class="hljs-keyword">if</span>(data.get(name)== <span class="hljs-literal">null</span>) &#123;<br>data.put(name,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>());<br>&#125;<br><span class="hljs-keyword">else</span> data.get(name).put(city.get(j),distance);<br>&#125;<br>&#125;<br><span class="hljs-comment">//读取城市并输出结果</span><br><span class="hljs-type">String</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> in.next();<br><span class="hljs-type">String</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> in.next();<br>System.out.println(data.get(first).get(second));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="第四周：继承与多态"><a href="#第四周：继承与多态" class="headerlink" title="第四周：继承与多态"></a><strong>第四周：继承与多态</strong></h2>]]></content>
    
    
    <categories>
      
      <category>后端back-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
